0001   0000             ;;;;;;;;;;;;;;;;;;;;;
0002   0000             ;;; port of a racing game from zx spectrum code by Jon Kingsman by Adrian Pilkington
0003   0000             ;;;;;;;;;;;;;;;;;;;;;
0004   0000             
0005   0000             #include "zx81defs.asm" ;; https://www.sinclairzxworld.com/viewtopic.php?t=2186&start=40
0001+  0000             ;defines to make us feel more at home
0002+  0000             #define         DEFB .BYTE 
0003+  0000             #define         DEFW .WORD
0004+  0000             #define         DEFM .TEXT
0005+  0000             #define         ORG  .ORG
0006+  0000             #define         EQU  .EQU
0006   0000             ;EQUs for ROM routines
0007   0000             #include "zx81rom.asm"
0001+  0000             ;ZX81 ROM routines 
0002+  0000             PRINT			EQU $10
0003+  0000             PRINTAT			EQU $08F5
0004+  0000             DISPROUT		EQU $0281
0005+  0000             ;D_FILE			EQU	$400C
0006+  0000             DISPLAY_3		EQU $0292 ;restore registers after a 'slow' display
0007+  0000             DISPLAY_5		EQU $02B5
0008+  0000             PLOT			EQU $0BB2 	; note ROM plot is 0baf - however first thing it does try to pull BC from the calculator stack
0009+  0000             							; so we'll skip past that and set BC ourselves
0010+  0000             CLS				EQU $0A2A
0011+  0000             KSCAN           EQU $02BB 
0012+  0000             FINDCHR         EQU $07BD
0013+  0000             COPY            EQU $0869
0014+  0000             FAST            EQU $0F23
0015+  0000             SLOW            EQU $0F2B
0016+  0000             SLOWORFAST		EQU $0207
0017+  0000             PAUSE			EQU $0F32
0018+  0000             SCROLL 			EQU $0C0E
0019+  0000             ;sys vars
0020+  0000             ERR_NR			EQU $40000008   0000             ;ZX81 char codes/how to survive without ASCII
0009   0000             #include "charcodes.asm"
0001+  0000             ; ZX81 Characters. 
0002+  0000             __:				EQU	$00	;spacja
0003+  0000             _QT:			EQU	$0B	;"
0004+  0000             _PD:			EQU	$0C	;funt 
0005+  0000             _SD:			EQU	$0D	;$
0006+  0000             _CL:			EQU	$0E	;:
0007+  0000             _QM:			EQU	$0F	;?
0008+  0000             _OP:			EQU	$10	;(
0009+  0000             _CP:			EQU	$11	;)
0010+  0000             _GT:			EQU	$12	;>
0011+  0000             _LT:			EQU	$13	;<
0012+  0000             _EQ:			EQU	$14	;=
0013+  0000             _PL:			EQU	$15	;+
0014+  0000             _MI:			EQU	$16	;-
0015+  0000             _AS:			EQU	$17	;*
0016+  0000             _SL:			EQU	$18	;/
0017+  0000             _SC:			EQU	$19	;;
0018+  0000             _CM:			EQU	$1A	;,
0019+  0000             _DT:			EQU	$1B	;.
0020+  0000             _NL:			EQU	$76	;NEWLINE
0021+  0000             
0022+  0000             _0				EQU $1C
0023+  0000             _1				EQU $1D
0024+  0000             _2				EQU $1E
0025+  0000             _3				EQU $1F
0026+  0000             _4				EQU $20
0027+  0000             _5				EQU $21
0028+  0000             _6				EQU $22
0029+  0000             _7				EQU $23
0030+  0000             _8				EQU $24
0031+  0000             _9				EQU $25
0032+  0000             _A				EQU $26
0033+  0000             _B				EQU $27
0034+  0000             _C				EQU $28
0035+  0000             _D				EQU $29
0036+  0000             _E				EQU $2A
0037+  0000             _F				EQU $2B
0038+  0000             _G				EQU $2C
0039+  0000             _H				EQU $2D
0040+  0000             _I				EQU $2E
0041+  0000             _J				EQU $2F
0042+  0000             _K				EQU $30
0043+  0000             _L				EQU $31
0044+  0000             _M				EQU $32
0045+  0000             _N				EQU $33
0046+  0000             _O				EQU $34
0047+  0000             _P				EQU $35
0048+  0000             _Q				EQU $36
0049+  0000             _R				EQU $37
0050+  0000             _S				EQU $38
0051+  0000             _T				EQU $39
0052+  0000             _U				EQU $3A
0053+  0000             _V				EQU $3B
0054+  0000             _W				EQU $3C
0055+  0000             _X				EQU $3D
0056+  0000             _Y				EQU $3E
0057+  0000             _Z				EQU $3F
0010   0000             ;system variables
0011   0000             #include "zx81sys.asm"
0001+  0000             ;system variables
0002+  0000             ;Origin of a ZX81 file is always 16393 
0003+  0000             
0004+  4009                             ORG 16393
0005+  4009                             
0006+  4009             ; System variables live here
0007+  4009 00          VERSN:          DEFB 0
0008+  400A 02 00       E_PPC:          DEFW 2
0009+  400C 75 41       D_FILE:         DEFW Display
0010+  400E 76 41       DF_CC:          DEFW Display+1                  ; First character of display
0011+  4010 8E 44       VARS:           DEFW Variables
0012+  4012 00 00       DEST:           DEFW 0
0013+  4014 8F 44       E_LINE:         DEFW BasicEnd 
0014+  4016 93 44       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0015+  4018 00 00       X_PTR:          DEFW 0
0016+  401A 94 44       STKBOT:         DEFW BasicEnd+5
0017+  401C 94 44       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0018+  401E 00          BREG:           DEFB 0
0019+  401F 5D 40       MEM:            DEFW MEMBOT
0020+  4021 00          UNUSED1:        DEFB 0
0021+  4022 02          DF_SZ:          DEFB 2
0022+  4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0023+  4025 BF FD       LAST_K:         DEFW $fdbf
0024+  4027 0F          DEBOUN:         DEFB 15
0025+  4028 37          MARGIN:         DEFB 55
0026+  4029 63 41       NXTLIN:         DEFW Line2                      ; Next line address
0027+  402B 00 00       OLDPPC:         DEFW 0
0028+  402D 00          FLAGX:          DEFB 0
0029+  402E 00 00       STRLEN:         DEFW 0
0030+  4030 8D 0C       T_ADDR:         DEFW $0c8d
0031+  4032 00 00       SEED:           DEFW 0
0032+  4034 A3 F5       FRAMES:         DEFW $f5a3
0033+  4036 00 00       COORDS:         DEFW 0
0034+  4038 BC          PR_CC:          DEFB $bc
0035+  4039 21 18       S_POSN:         DEFW $1821
0036+  403B 40          CDFLAG:         DEFB $40
0037+  403C 00 00 00 00 PRBUFF:         DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$76 ; 32 Spaces + Newline
0037+  4040 00 00 00 00 
0037+  4044 00 00 00 00 
0037+  4048 00 00 00 00 
0037+  404C 00 00 00 00 
0037+  4050 00 00 00 00 
0037+  4054 00 00 00 00 
0037+  4058 00 00 00 00 
0037+  405C 76 
0038+  405D 00 00 00 00 MEMBOT:         DEFB 0,0,0,0,0,0,0,0,0,0,$84,$20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 30 zeros
0038+  4061 00 00 00 00 
0038+  4065 00 00 84 20 
0038+  4069 00 00 00 00 
0038+  406D 00 00 00 00 
0038+  4071 00 00 00 00 
0038+  4075 00 00 00 00 
0038+  4079 00 00 
0039+  407B 00 00       UNUNSED2:       DEFW 0
0040+  407D             
0041+  407D             ; End of system variables
0042+  407D             
0012   407D             
0013   407D             ;the standard REM statement that will contain our 'hex' code
0014   407D             #include "line1.asm"
0001+  407D             ;Line 1 
0002+  407D             ;this is the REM statement...
0003+  407D 00 00       Line1:          DEFB $00,$00                    ; Line 1
0004+  407F E2 00                       DEFW Line1End-Line1Text         ; Line 1 length
0005+  4081 EA          Line1Text:      DEFB $ea                        ; REM             
0006+  4082             
0015   4082             
0016   4082             ; these variables need converting to screen addresses for zx81
0017   4082             ; problem with zx81 is the screen display D_FILE memory address changes with size of basic program 
0018   4082             ; see https://www.sinclairzxworld.com/viewtopic.php?t=3919
0019   4082             ; (the asm here is converted to one line of basic)
0020   4082             #define ROWS_IN_SCREEN 22
0021   4082             #define COL_IN_SCREEN 32
0022   4082             #define ROAD_SCREEN_MEM_OFFSET 9    
0023   4082             #define WIDTH_OF_ROAD 9
0024   4082             #define CAR_SCREEN_MEM_START_OFFSET 776
0025   4082             #define ROADFROM_SCREEN_MEM_LOCATION 23263
0026   4082             #define ROADTO_SCREEN_MEM_LOCATION 23295
0027   4082             #define RANDOM_BYTES_MEM_LOCATION 14000
0028   4082             
0029   4082             ;D_FILE is location of screen memory (which moves depending on length of basic, but should be fixed after program is loaded
0030   4082             ; probably should run some code to detect if this is 1K or 16K as well, or just have 2 verisons 1K and 16K
0031   4082             #define D_FILE 16396
0032   4082             ;black block
0033   4082             #define CAR_CHARACTER_CODE 128  
0034   4082             ;black grey block
0035   4082             #define ROAD_CHARACTER_CODE 136
0036   4082             
0037   4082             #define GREY_SQAURE 8  
0038   4082             
0039   4082             ; keyboard caps to v
0040   4082             #define KEYBOARD_READ_MEMORY_LOCATION_CAPV $FE
0041   4082             ; keyboard space to b
0042   4082             #define KEYBOARD_READ_MEMORY_LOCATION_SPACEB $7F 
0043   4082             
0044   4082 C3 8D 40    	jp main
0045   4085             
0046   4085             var_car_pos  ; was 32900 in zx spec version
0047   4085 00 00       	DEFB 0,0
0048   4087             var_road_pos
0049   4087 00 00       	DEFB 0,0
0050   4089             var_scroll_road_from
0051   4089 00 00       	DEFB 0,0
0052   408B             var_scroll_road_to
0053   408B 00 00       	DEFB 0,0
0054   408D             
0055   408D             main
0056   408D CD 2A 0A    	call CLS	
0057   4090 F3          	di
0058   4091             	
0059   4091 2A 0C 40    	ld hl,(D_FILE) ;initialise road start memory address
0060   4094 11 09 00    	ld de, ROAD_SCREEN_MEM_OFFSET
0061   4097 19          	add hl, de	
0062   4098 E5          	push hl  ;save road posn
0063   4099 AF          	xor a  ;???? possibly clears cpu flags?
0064   409A 3E 88       	ld a, ROAD_CHARACTER_CODE
0065   409C 06 16       	ld b,ROWS_IN_SCREEN
0066   409E             	
0067   409E             initialiseRoad  ;; was fillscreen in zx spectrum version, initialiseRoad is beter name of what it's doing!!
0068   409E 77          	ld (hl),a    ;; road starts as two staight vertical lines 
0069   409F 23          	inc hl   	 ;; make each edge of road 2 characters wide
0070   40A0 77          	ld (hl),a   
0071   40A1 11 09 00    	ld de,WIDTH_OF_ROAD   
0072   40A4 19          	add hl,de			  ;; add offset to get to other side of road
0073   40A5 77          	ld (hl),a				;; make each edge of road 2 characters wide
0074   40A6 23          	inc hl					
0075   40A7 77          	ld (hl),a
0076   40A8 11 16 00    	ld de,22  ;; on zx spectrum had ld de,21
0077   40AB 19          	add hl,de
0078   40AC 10 F0       	djnz initialiseRoad
0079   40AE             
0080   40AE 06 16       	ld b,ROWS_IN_SCREEN
0081   40B0 48          	ld c,b  ;initialise score
0082   40B1 C5          	push bc  ;save score
0083   40B2             	
0084   40B2 2A 0C 40    	ld hl,(D_FILE) ;initialise car
0085   40B5 11 08 03    	ld de, CAR_SCREEN_MEM_START_OFFSET
0086   40B8 19          	add hl, de
0087   40B9 3E 80       	ld a,CAR_CHARACTER_CODE 
0088   40BB 77          	ld (hl),a
0089   40BC 22 85 40    	ld (var_car_pos),hl ;save car posn
0090   40BF             
0091   40BF             	
0092   40BF             principalloop
0093   40BF 2A 85 40    	ld hl,(var_car_pos) ;retrieve car posn
0094   40C2 3E 80       	ld a,CAR_CHARACTER_CODE  ;erase car
0095   40C4 77          	ld (hl),a
0096   40C5 FB          	ei
0097   40C6 01 FE 00    	ld bc,KEYBOARD_READ_MEMORY_LOCATION_CAPV ;read keyboard caps to v
0098   40C9 ED 78       	in a,(c)
0099   40CB FE BF       	cp 191
0100   40CD 20 01       	jr nz, moveright
0101   40CF 2C          	inc l
0102   40D0             moveright
0103   40D0 01 7F 00    	ld bc,KEYBOARD_READ_MEMORY_LOCATION_SPACEB ;read keyboard space to b
0104   40D3 ED 78       	in a,(c)
0105   40D5 FE BF       	cp 191
0106   40D7 20 01       	jr nz, dontmove
0107   40D9 2D          	dec l
0108   40DA             		;jp gameover; return early for debug
0109   40DA             dontmove
0110   40DA F3          	di
0111   40DB 22 85 40    	ld (var_car_pos),hl ;store car posn
0112   40DE 11 20 00    	ld de, 32 ;new carposn
0113   40E1 AF          	xor a  ;set carry flag to 0
0114   40E2 ED 52       	sbc hl,de
0115   40E4 7E          	ld a,(hl) ;crash?
0116   40E5 B7          	or a
0117   40E6 28 54       	jr z,gameover
0118   40E8 3E 80       	ld a,CAR_CHARACTER_CODE  ;print car
0119   40EA 77          	ld (hl),a
0120   40EB 21 DF 5A    	ld hl,ROADFROM_SCREEN_MEM_LOCATION ;scroll road
0121   40EE 11 FF 5A    	ld de,ROADTO_SCREEN_MEM_LOCATION 
0122   40F1 01 E0 02    	ld bc,736
0123   40F4 ED B8       	lddr
0124   40F6 C1          	pop bc  ;retrieve score
0125   40F7 E1          	pop hl  ;retrieve road posn
0126   40F8 E5          	push hl  ;save road posn
0127   40F9 3E 38       	ld a,56  ;delete old road
0128   40FB 77          	ld (hl),a
0129   40FC 23          	inc hl
0130   40FD 77          	ld (hl),a
0131   40FE 11 09 00    	ld de,9
0132   4101 19          	add hl,de
0133   4102 77          	ld (hl),a
0134   4103 23          	inc hl
0135   4104 77          	ld (hl),a
0136   4105             	;random road left or right
0137   4105 21 B0 36    	ld hl,RANDOM_BYTES_MEM_LOCATION ;source of random bytes in ROM
0138   4108 16 00       	ld d,0
0139   410A 59          	ld e,c
0140   410B 19          	add hl, de
0141   410C 7E          	ld a,(hl)
0142   410D E1          	pop hl  ;retrieve road posn
0143   410E 2B          	dec hl  ;move road posn 1 left
0144   410F E6 01       	and 1
0145   4111 28 02       	jr z, roadleft
0146   4113 23          	inc hl
0147   4114 23          	inc hl
0148   4115             roadleft
0149   4115 7D          	ld a,l  ;check left
0150   4116 FE FF       	cp 255
0151   4118 20 02       	jr nz, checkright
0152   411A 23          	inc hl
0153   411B 23          	inc hl
0154   411C             checkright
0155   411C 7D          	ld a,l
0156   411D FE 15       	cp 21
0157   411F 20 02       	jr nz, newroadposn
0158   4121 2B          	dec hl
0159   4122 2B          	dec hl
0160   4123             newroadposn
0161   4123 E5          	push hl  ;save road posn
0162   4124 AF          	xor a  ;print new road
0163   4125 77          	ld (hl),a
0164   4126 23          	inc hl
0165   4127 77          	ld (hl),a
0166   4128 11 09 00    	ld de,9
0167   412B 19          	add hl,de
0168   412C 77          	ld (hl),a
0169   412D 23          	inc hl
0170   412E 77          	ld (hl),a
0171   412F 03          	inc bc  ;add 1 to score
0172   4130 C5          	push bc  ;save score
0173   4131             	;wait routine
0174   4131 01 FF 1F    	ld bc,$1fff ;max waiting time
0175   4134             wait
0176   4134 0B          	dec bc
0177   4135 78          	ld a,b
0178   4136 B1          	or c
0179   4137 20 FB       	jr nz, wait
0180   4139 C3 BF 40    	jp principalloop
0181   413C             gameover
0182   413C C1          	pop bc  ;retrieve score
0183   413D E1          	pop hl  ;empty stack
0184   413E FB          	ei
0185   413F C9          	ret     ; game and tutorial written by Jon Kingsman
0186   4140             
0187   4140             fill_screen_with_char    ; adapted from http://swensont.epizy.com/ZX81Assembly.pdf screen1
0188   4140 2A 0C 40    	ld hl,(D_FILE) ; Get start of display
0189   4143 0E 16       	ld c,22 ; line counter (22 lines)
0190   4145             loop1
0191   4145 23          	inc hl ; get past EOL
0192   4146 06 20       	ld b,32 ; character counter (32 rows)
0193   4148             loop2 
0194   4148 36 08       	ld (HL),GREY_SQAURE ; print grey square character
0195   414A 23          	inc hl ; move to next print position
0196   414B 10 FB       	djnz loop2 ; Do it again until B=0
0197   414D 0D          	dec c ; next line
0198   414E 20 F5       	jr nz,loop1
0199   4150 C9          	ret 
0200   4151             
0201   4151             print_to_screen_at    ; adapted from http://swensont.epizy.com/ZX81Assembly.pdf screen1
0202   4151 2A 0C 40    	ld hl,(D_FILE) ; Get start of display
0203   4154 0E 16       	ld c,22 ; line counter (22 lines)
0204   4156             Ploop1
0205   4156 23          	inc hl ; get past EOL
0206   4157 06 20       	ld b,32 ; character counter (32 rows)
0207   4159             Ploop2 
0208   4159 36 08       	ld (HL),$08 ; print grey square character
0209   415B 23          	inc hl ; move to next print position
0210   415C 10 FB       	djnz Ploop2 ; Do it again until B=0
0211   415E 0D          	dec c ; next line
0212   415F 20 F5       	jr nz,Ploop1
0213   4161 C9          	ret 	
0214   4162             	
0215   4162             ;include our variables
0216   4162             #include "vars.asm"
0001+  4162             ;our variables 
0002+  4162             
0217   4162             
0218   4162             ; ===========================================================
0219   4162             ; code ends
0220   4162             ; ===========================================================
0221   4162             ;end the REM line and put in the RAND USR line to call our 'hex code'
0222   4162             #include "line2.asm"
0001+  4162             ;this is the end of line 1 - the REM	 		
0002+  4162 76          				DEFB $76                        ; Newline				
0003+  4163             ;followed by the the RAND USR line				
0004+  4163             Line1End       
0005+  4163 00 0A       Line2			DEFB $00,$0a
0006+  4165 0E 00                       DEFW Line2End-Line2Text
0007+  4167 F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0008+  4169 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0008+  416D 20 
0009+  416E 7E                          DEFB $7E                        ; Number
0010+  416F 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0010+  4173 00 
0011+  4174 76                          DEFB $76                        ; Newline
0012+  4175             Line2End 
0223   4175             
0224   4175             ;display file defintion
0225   4175             #include "screen.asm"               
0001+  4175             ;ZX81 screens
0002+  4175             ; Display file (ZX81 screen) - low res screen 
0003+  4175 76          Display        	DEFB $76     
0004+  4176 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 0
0004+  417A 00 00 00 00 
0004+  417E 00 00 00 00 
0004+  4182 00 00 00 00 
0004+  4186 00 00 00 00 
0004+  418A 00 00 00 00 
0004+  418E 00 00 00 00 
0004+  4192 00 00 00 00 
0004+  4196 76 
0005+  4197 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 1
0005+  419B 00 00 00 00 
0005+  419F 00 00 00 00 
0005+  41A3 00 00 00 00 
0005+  41A7 00 00 00 00 
0005+  41AB 00 00 00 00 
0005+  41AF 00 00 00 00 
0005+  41B3 00 00 00 00 
0005+  41B7 76 
0006+  41B8 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 2
0006+  41BC 00 00 00 00 
0006+  41C0 00 00 00 00 
0006+  41C4 00 00 00 00 
0006+  41C8 00 00 00 00 
0006+  41CC 00 00 00 00 
0006+  41D0 00 00 00 00 
0006+  41D4 00 00 00 00 
0006+  41D8 76 
0007+  41D9 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 3
0007+  41DD 00 00 00 00 
0007+  41E1 00 00 00 00 
0007+  41E5 00 00 00 00 
0007+  41E9 00 00 00 00 
0007+  41ED 00 00 00 00 
0007+  41F1 00 00 00 00 
0007+  41F5 00 00 00 00 
0007+  41F9 76 
0008+  41FA 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 4
0008+  41FE 00 00 00 00 
0008+  4202 00 00 00 00 
0008+  4206 00 00 00 00 
0008+  420A 00 00 00 00 
0008+  420E 00 00 00 00 
0008+  4212 00 00 00 00 
0008+  4216 00 00 00 00 
0008+  421A 76 
0009+  421B 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 5
0009+  421F 00 00 00 00 
0009+  4223 00 00 00 00 
0009+  4227 00 00 00 00 
0009+  422B 00 00 00 00 
0009+  422F 00 00 00 00 
0009+  4233 00 00 00 00 
0009+  4237 00 00 00 00 
0009+  423B 76 
0010+  423C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 6
0010+  4240 00 00 00 00 
0010+  4244 00 00 00 00 
0010+  4248 00 00 00 00 
0010+  424C 00 00 00 00 
0010+  4250 00 00 00 00 
0010+  4254 00 00 00 00 
0010+  4258 00 00 00 00 
0010+  425C 76 
0011+  425D 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 7
0011+  4261 00 00 00 00 
0011+  4265 00 00 00 00 
0011+  4269 00 00 00 00 
0011+  426D 00 00 00 00 
0011+  4271 00 00 00 00 
0011+  4275 00 00 00 00 
0011+  4279 00 00 00 00 
0011+  427D 76 
0012+  427E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 8
0012+  4282 00 00 00 00 
0012+  4286 00 00 00 00 
0012+  428A 00 00 00 00 
0012+  428E 00 00 00 00 
0012+  4292 00 00 00 00 
0012+  4296 00 00 00 00 
0012+  429A 00 00 00 00 
0012+  429E 76 
0013+  429F 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 9
0013+  42A3 00 00 00 00 
0013+  42A7 00 00 00 00 
0013+  42AB 00 00 00 00 
0013+  42AF 00 00 00 00 
0013+  42B3 00 00 00 00 
0013+  42B7 00 00 00 00 
0013+  42BB 00 00 00 00 
0013+  42BF 76 
0014+  42C0 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 10
0014+  42C4 00 00 00 00 
0014+  42C8 00 00 00 00 
0014+  42CC 00 00 00 00 
0014+  42D0 00 00 00 00 
0014+  42D4 00 00 00 00 
0014+  42D8 00 00 00 00 
0014+  42DC 00 00 00 00 
0014+  42E0 76 
0015+  42E1 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 11
0015+  42E5 00 00 00 00 
0015+  42E9 00 00 00 00 
0015+  42ED 00 00 00 00 
0015+  42F1 00 00 00 00 
0015+  42F5 00 00 00 00 
0015+  42F9 00 00 00 00 
0015+  42FD 00 00 00 00 
0015+  4301 76 
0016+  4302 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 12
0016+  4306 00 00 00 00 
0016+  430A 00 00 00 00 
0016+  430E 00 00 00 00 
0016+  4312 00 00 00 00 
0016+  4316 00 00 00 00 
0016+  431A 00 00 00 00 
0016+  431E 00 00 00 00 
0016+  4322 76 
0017+  4323 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 13
0017+  4327 00 00 00 00 
0017+  432B 00 00 00 00 
0017+  432F 00 00 00 00 
0017+  4333 00 00 00 00 
0017+  4337 00 00 00 00 
0017+  433B 00 00 00 00 
0017+  433F 00 00 00 00 
0017+  4343 76 
0018+  4344 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 14
0018+  4348 00 00 00 00 
0018+  434C 00 00 00 00 
0018+  4350 00 00 00 00 
0018+  4354 00 00 00 00 
0018+  4358 00 00 00 00 
0018+  435C 00 00 00 00 
0018+  4360 00 00 00 00 
0018+  4364 76 
0019+  4365 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 15
0019+  4369 00 00 00 00 
0019+  436D 00 00 00 00 
0019+  4371 00 00 00 00 
0019+  4375 00 00 00 00 
0019+  4379 00 00 00 00 
0019+  437D 00 00 00 00 
0019+  4381 00 00 00 00 
0019+  4385 76 
0020+  4386 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 16
0020+  438A 00 00 00 00 
0020+  438E 00 00 00 00 
0020+  4392 00 00 00 00 
0020+  4396 00 00 00 00 
0020+  439A 00 00 00 00 
0020+  439E 00 00 00 00 
0020+  43A2 00 00 00 00 
0020+  43A6 76 
0021+  43A7 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 17
0021+  43AB 00 00 00 00 
0021+  43AF 00 00 00 00 
0021+  43B3 00 00 00 00 
0021+  43B7 00 00 00 00 
0021+  43BB 00 00 00 00 
0021+  43BF 00 00 00 00 
0021+  43C3 00 00 00 00 
0021+  43C7 76 
0022+  43C8 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 18
0022+  43CC 00 00 00 00 
0022+  43D0 00 00 00 00 
0022+  43D4 00 00 00 00 
0022+  43D8 00 00 00 00 
0022+  43DC 00 00 00 00 
0022+  43E0 00 00 00 00 
0022+  43E4 00 00 00 00 
0022+  43E8 76 
0023+  43E9 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 19
0023+  43ED 00 00 00 00 
0023+  43F1 00 00 00 00 
0023+  43F5 00 00 00 00 
0023+  43F9 00 00 00 00 
0023+  43FD 00 00 00 00 
0023+  4401 00 00 00 00 
0023+  4405 00 00 00 00 
0023+  4409 76 
0024+  440A 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 20
0024+  440E 00 00 00 00 
0024+  4412 00 00 00 00 
0024+  4416 00 00 00 00 
0024+  441A 00 00 00 00 
0024+  441E 00 00 00 00 
0024+  4422 00 00 00 00 
0024+  4426 00 00 00 00 
0024+  442A 76 
0025+  442B 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 21
0025+  442F 00 00 00 00 
0025+  4433 00 00 00 00 
0025+  4437 00 00 00 00 
0025+  443B 00 00 00 00 
0025+  443F 00 00 00 00 
0025+  4443 00 00 00 00 
0025+  4447 00 00 00 00 
0025+  444B 76 
0026+  444C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 22
0026+  4450 00 00 00 00 
0026+  4454 00 00 00 00 
0026+  4458 00 00 00 00 
0026+  445C 00 00 00 00 
0026+  4460 00 00 00 00 
0026+  4464 00 00 00 00 
0026+  4468 00 00 00 00 
0026+  446C 76 
0027+  446D 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 23
0027+  4471 00 00 00 00 
0027+  4475 00 00 00 00 
0027+  4479 00 00 00 00 
0027+  447D 00 00 00 00 
0027+  4481 00 00 00 00 
0027+  4485 00 00 00 00 
0027+  4489 00 00 00 00 
0027+  448D 76 
0028+  448E             
0226   448E             
0227   448E             ;close out the basic program
0228   448E             #include "endbasic.asm"
0001+  448E             ; close out the BASIC program structure
0002+  448E             ; BASIC Variables area 
0003+  448E             Variables:      
0004+  448E 80          VariablesEnd:   DEFB $80
0005+  448F             BasicEnd:                              
0006+  448F             
0007+  448F             
0008+  448F             #END
tasm: Number of errors = 0
