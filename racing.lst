0001   0000             ;;;;;;;;;;;;;;;;;;;;;
0002   0000             ;;; port of a racing game from zx spectrum code by Jon Kingsman by Adrian Pilkington
0003   0000             ;;;;;;;;;;;;;;;;;;;;;
0004   0000             
0005   0000             #include "zx81defs.asm" ;; https://www.sinclairzxworld.com/viewtopic.php?t=2186&start=40
0001+  0000             ;defines to make us feel more at home
0002+  0000             #define         DEFB .BYTE 
0003+  0000             #define         DEFW .WORD
0004+  0000             #define         DEFM .TEXT
0005+  0000             #define         ORG  .ORG
0006+  0000             #define         EQU  .EQU
0006   0000             ;EQUs for ROM routines
0007   0000             #include "zx81rom.asm"
0001+  0000             ;ZX81 ROM routines 
0002+  0000             PRINT			EQU $10
0003+  0000             PRINTAT			EQU $08F5
0004+  0000             DISPROUT		EQU $0281
0005+  0000             ;D_FILE			EQU	$400C
0006+  0000             DISPLAY_3		EQU $0292 ;restore registers after a 'slow' display
0007+  0000             DISPLAY_5		EQU $02B5
0008+  0000             PLOT			EQU $0BB2 	; note ROM plot is 0baf - however first thing it does try to pull BC from the calculator stack
0009+  0000             							; so we'll skip past that and set BC ourselves
0010+  0000             CLS				EQU $0A2A
0011+  0000             KSCAN           EQU $02BB 
0012+  0000             FINDCHR         EQU $07BD
0013+  0000             COPY            EQU $0869
0014+  0000             FAST            EQU $0F23
0015+  0000             SLOW            EQU $0F2B
0016+  0000             SLOWORFAST		EQU $0207
0017+  0000             PAUSE			EQU $0F32
0018+  0000             SCROLL 			EQU $0C0E
0019+  0000             ;sys vars
0020+  0000             ERR_NR			EQU $40000008   0000             ;ZX81 char codes/how to survive without ASCII
0009   0000             #include "charcodes.asm"
0001+  0000             ; ZX81 Characters. 
0002+  0000             __:				EQU	$00	;spacja
0003+  0000             _QT:			EQU	$0B	;"
0004+  0000             _PD:			EQU	$0C	;funt 
0005+  0000             _SD:			EQU	$0D	;$
0006+  0000             _CL:			EQU	$0E	;:
0007+  0000             _QM:			EQU	$0F	;?
0008+  0000             _OP:			EQU	$10	;(
0009+  0000             _CP:			EQU	$11	;)
0010+  0000             _GT:			EQU	$12	;>
0011+  0000             _LT:			EQU	$13	;<
0012+  0000             _EQ:			EQU	$14	;=
0013+  0000             _PL:			EQU	$15	;+
0014+  0000             _MI:			EQU	$16	;-
0015+  0000             _AS:			EQU	$17	;*
0016+  0000             _SL:			EQU	$18	;/
0017+  0000             _SC:			EQU	$19	;;
0018+  0000             _CM:			EQU	$1A	;,
0019+  0000             _DT:			EQU	$1B	;.
0020+  0000             _NL:			EQU	$76	;NEWLINE
0021+  0000             
0022+  0000             _0				EQU $1C
0023+  0000             _1				EQU $1D
0024+  0000             _2				EQU $1E
0025+  0000             _3				EQU $1F
0026+  0000             _4				EQU $20
0027+  0000             _5				EQU $21
0028+  0000             _6				EQU $22
0029+  0000             _7				EQU $23
0030+  0000             _8				EQU $24
0031+  0000             _9				EQU $25
0032+  0000             _A				EQU $26
0033+  0000             _B				EQU $27
0034+  0000             _C				EQU $28
0035+  0000             _D				EQU $29
0036+  0000             _E				EQU $2A
0037+  0000             _F				EQU $2B
0038+  0000             _G				EQU $2C
0039+  0000             _H				EQU $2D
0040+  0000             _I				EQU $2E
0041+  0000             _J				EQU $2F
0042+  0000             _K				EQU $30
0043+  0000             _L				EQU $31
0044+  0000             _M				EQU $32
0045+  0000             _N				EQU $33
0046+  0000             _O				EQU $34
0047+  0000             _P				EQU $35
0048+  0000             _Q				EQU $36
0049+  0000             _R				EQU $37
0050+  0000             _S				EQU $38
0051+  0000             _T				EQU $39
0052+  0000             _U				EQU $3A
0053+  0000             _V				EQU $3B
0054+  0000             _W				EQU $3C
0055+  0000             _X				EQU $3D
0056+  0000             _Y				EQU $3E
0057+  0000             _Z				EQU $3F
0010   0000             ;system variables
0011   0000             #include "zx81sys.asm"
0001+  0000             ;system variables
0002+  0000             ;Origin of a ZX81 file is always 16393 
0003+  0000             
0004+  4009                             ORG 16393
0005+  4009                             
0006+  4009             ; System variables live here
0007+  4009 00          VERSN:          DEFB 0
0008+  400A 02 00       E_PPC:          DEFW 2
0009+  400C 7B 41       D_FILE:         DEFW Display
0010+  400E 7C 41       DF_CC:          DEFW Display+1                  ; First character of display
0011+  4010 94 44       VARS:           DEFW Variables
0012+  4012 00 00       DEST:           DEFW 0
0013+  4014 95 44       E_LINE:         DEFW BasicEnd 
0014+  4016 99 44       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0015+  4018 00 00       X_PTR:          DEFW 0
0016+  401A 9A 44       STKBOT:         DEFW BasicEnd+5
0017+  401C 9A 44       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0018+  401E 00          BREG:           DEFB 0
0019+  401F 5D 40       MEM:            DEFW MEMBOT
0020+  4021 00          UNUSED1:        DEFB 0
0021+  4022 02          DF_SZ:          DEFB 2
0022+  4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0023+  4025 BF FD       LAST_K:         DEFW $fdbf
0024+  4027 0F          DEBOUN:         DEFB 15
0025+  4028 37          MARGIN:         DEFB 55
0026+  4029 69 41       NXTLIN:         DEFW Line2                      ; Next line address
0027+  402B 00 00       OLDPPC:         DEFW 0
0028+  402D 00          FLAGX:          DEFB 0
0029+  402E 00 00       STRLEN:         DEFW 0
0030+  4030 8D 0C       T_ADDR:         DEFW $0c8d
0031+  4032 00 00       SEED:           DEFW 0
0032+  4034 A3 F5       FRAMES:         DEFW $f5a3
0033+  4036 00 00       COORDS:         DEFW 0
0034+  4038 BC          PR_CC:          DEFB $bc
0035+  4039 21 18       S_POSN:         DEFW $1821
0036+  403B 40          CDFLAG:         DEFB $40
0037+  403C 00 00 00 00 PRBUFF:         DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$76 ; 32 Spaces + Newline
0037+  4040 00 00 00 00 
0037+  4044 00 00 00 00 
0037+  4048 00 00 00 00 
0037+  404C 00 00 00 00 
0037+  4050 00 00 00 00 
0037+  4054 00 00 00 00 
0037+  4058 00 00 00 00 
0037+  405C 76 
0038+  405D 00 00 00 00 MEMBOT:         DEFB 0,0,0,0,0,0,0,0,0,0,$84,$20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 30 zeros
0038+  4061 00 00 00 00 
0038+  4065 00 00 84 20 
0038+  4069 00 00 00 00 
0038+  406D 00 00 00 00 
0038+  4071 00 00 00 00 
0038+  4075 00 00 00 00 
0038+  4079 00 00 
0039+  407B 00 00       UNUNSED2:       DEFW 0
0040+  407D             
0041+  407D             ; End of system variables
0042+  407D             
0012   407D             
0013   407D             ;the standard REM statement that will contain our 'hex' code
0014   407D             #include "line1.asm"
0001+  407D             ;Line 1 
0002+  407D             ;this is the REM statement...
0003+  407D 00 00       Line1:          DEFB $00,$00                    ; Line 1
0004+  407F E8 00                       DEFW Line1End-Line1Text         ; Line 1 length
0005+  4081 EA          Line1Text:      DEFB $ea                        ; REM             
0006+  4082             
0015   4082             
0016   4082             ; these variables need converting to screen addresses for zx81
0017   4082             ; problem with zx81 is the screen display D_FILE memory address changes with size of basic program 
0018   4082             ; see https://www.sinclairzxworld.com/viewtopic.php?t=3919
0019   4082             ; (the asm here is converted to one line of basic)
0020   4082             #define ROWS_IN_SCREEN 22
0021   4082             #define COL_IN_SCREEN 32
0022   4082             #define ROAD_SCREEN_MEM_OFFSET 9    
0023   4082             #define WIDTH_OF_ROAD 9
0024   4082             #define CAR_SCREEN_MEM_START_OFFSET 776
0025   4082             #define ROADFROM_SCREEN_MEM_LOCATION 23263
0026   4082             #define ROADTO_SCREEN_MEM_LOCATION 23295
0027   4082             #define RANDOM_BYTES_MEM_LOCATION 14000
0028   4082             
0029   4082             ;D_FILE is location of screen memory (which moves depending on length of basic, but should be fixed after program is loaded
0030   4082             ; probably should run some code to detect if this is 1K or 16K as well, or just have 2 verisons 1K and 16K
0031   4082             #define D_FILE 16396
0032   4082             ;black block
0033   4082             #define CAR_CHARACTER_CODE 128  
0034   4082             ;black grey block
0035   4082             #define ROAD_CHARACTER_CODE 136
0036   4082             
0037   4082             #define GREY_SQAURE 8  
0038   4082             
0039   4082             ; keyboard caps to v
0040   4082             #define KEYBOARD_READ_MEMORY_LOCATION_CAPV 65278
0041   4082             ; keyboard space to b
0042   4082             #define KEYBOARD_READ_MEMORY_LOCATION_SPACEB 32766
0043   4082             
0044   4082 C3 8D 40    	jp main
0045   4085             
0046   4085             var_car_pos  ; was 32900 in zx spec version
0047   4085 00 00       	DEFB 0,0
0048   4087             var_road_pos
0049   4087 00 00       	DEFB 0,0
0050   4089             var_scroll_road_from
0051   4089 00 00       	DEFB 0,0
0052   408B             var_scroll_road_to
0053   408B 00 00       	DEFB 0,0
0054   408D             
0055   408D             main
0056   408D CD 2A 0A    	call CLS	
0057   4090 F3          	di
0058   4091             	
0059   4091 2A 0C 40    	ld hl,(D_FILE) ;initialise road start memory address
0060   4094 11 09 00    	ld de, ROAD_SCREEN_MEM_OFFSET
0061   4097 19          	add hl, de	
0062   4098 E5          	push hl  ;save road posn
0063   4099 AF          	xor a  ;????
0064   409A 3E 88       	ld a, ROAD_CHARACTER_CODE
0065   409C 06 16       	ld b,ROWS_IN_SCREEN
0066   409E             	
0067   409E             initialiseRoad  ;; was fillscreen in zx spectrum version, initialiseRoad is beter name of what it's doing!!
0068   409E 77          	ld (hl),a    ;; road starts as two staight vertical lines 
0069   409F 23          	inc hl   	 ;; make each edge of road 2 characters wide
0070   40A0 77          	ld (hl),a   
0071   40A1 11 09 00    	ld de,WIDTH_OF_ROAD   
0072   40A4 19          	add hl,de			  ;; add offset to get to other side of road
0073   40A5 77          	ld (hl),a				;; make each edge of road 2 characters wide
0074   40A6 23          	inc hl					
0075   40A7 77          	ld (hl),a
0076   40A8 11 16 00    	ld de,22 
0077   40AB 19          	add hl,de
0078   40AC 10 F0       	djnz initialiseRoad
0079   40AE             
0080   40AE 06 16       	ld b,ROWS_IN_SCREEN
0081   40B0 48          	ld c,b  ;initialise score
0082   40B1 C5          	push bc  ;save score
0083   40B2             	
0084   40B2 C3 42 41    	jp gameover ;return early for debug
0085   40B5             	
0086   40B5 2A 0C 40    	ld hl,(D_FILE) ;initialise car
0087   40B8 11 08 03    	ld de, CAR_SCREEN_MEM_START_OFFSET
0088   40BB 19          	add hl, de
0089   40BC 3E 80       	ld a,CAR_CHARACTER_CODE 
0090   40BE 77          	ld (hl),a
0091   40BF 22 85 40    	ld (var_car_pos),hl ;save car posn
0092   40C2             
0093   40C2 C3 42 41    	jp gameover; return early for debug
0094   40C5             	
0095   40C5             principalloop
0096   40C5 2A 85 40    	ld hl,(var_car_pos) ;retrieve car posn
0097   40C8 3E 08       	ld a,GREY_SQAURE  ;erase car
0098   40CA 77          	ld (hl),a
0099   40CB FB          	ei
0100   40CC 01 FE FE    	ld bc,KEYBOARD_READ_MEMORY_LOCATION_CAPV ;read keyboard caps to v
0101   40CF ED 78       	in a,(c)
0102   40D1 FE BF       	cp 191
0103   40D3 20 01       	jr nz, moveright
0104   40D5 2C          	inc l
0105   40D6             moveright
0106   40D6 01 FE 7F    	ld bc,KEYBOARD_READ_MEMORY_LOCATION_SPACEB ;read keyboard space to b
0107   40D9 ED 78       	in a,(c)
0108   40DB FE BF       	cp 191
0109   40DD 20 01       	jr nz, dontmove
0110   40DF 2D          	dec l
0111   40E0             dontmove
0112   40E0 F3          	di
0113   40E1 22 85 40    	ld (var_car_pos),hl ;store car posn
0114   40E4 11 20 00    	ld de, 32 ;new carposn
0115   40E7 AF          	xor a  ;set carry flag to 0
0116   40E8 ED 52       	sbc hl,de
0117   40EA 7E          	ld a,(hl) ;crash?
0118   40EB B7          	or a
0119   40EC 28 54       	jr z,gameover
0120   40EE 3E 80       	ld a,CAR_CHARACTER_CODE  ;print car
0121   40F0 77          	ld (hl),a
0122   40F1 21 DF 5A    	ld hl,ROADFROM_SCREEN_MEM_LOCATION ;scroll road
0123   40F4 11 FF 5A    	ld de,ROADTO_SCREEN_MEM_LOCATION 
0124   40F7 01 E0 02    	ld bc,736
0125   40FA ED B8       	lddr
0126   40FC C1          	pop bc  ;retrieve score
0127   40FD E1          	pop hl  ;retrieve road posn
0128   40FE E5          	push hl  ;save road posn
0129   40FF 3E 38       	ld a,56  ;delete old road
0130   4101 77          	ld (hl),a
0131   4102 23          	inc hl
0132   4103 77          	ld (hl),a
0133   4104 11 09 00    	ld de,9
0134   4107 19          	add hl,de
0135   4108 77          	ld (hl),a
0136   4109 23          	inc hl
0137   410A 77          	ld (hl),a
0138   410B             	;random road left or right
0139   410B 21 B0 36    	ld hl,RANDOM_BYTES_MEM_LOCATION ;source of random bytes in ROM
0140   410E 16 00       	ld d,0
0141   4110 59          	ld e,c
0142   4111 19          	add hl, de
0143   4112 7E          	ld a,(hl)
0144   4113 E1          	pop hl  ;retrieve road posn
0145   4114 2B          	dec hl  ;move road posn 1 left
0146   4115 E6 01       	and 1
0147   4117 28 02       	jr z, roadleft
0148   4119 23          	inc hl
0149   411A 23          	inc hl
0150   411B             roadleft
0151   411B 7D          	ld a,l  ;check left
0152   411C FE FF       	cp 255
0153   411E 20 02       	jr nz, checkright
0154   4120 23          	inc hl
0155   4121 23          	inc hl
0156   4122             checkright
0157   4122 7D          	ld a,l
0158   4123 FE 15       	cp 21
0159   4125 20 02       	jr nz, newroadposn
0160   4127 2B          	dec hl
0161   4128 2B          	dec hl
0162   4129             newroadposn
0163   4129 E5          	push hl  ;save road posn
0164   412A AF          	xor a  ;print new road
0165   412B 77          	ld (hl),a
0166   412C 23          	inc hl
0167   412D 77          	ld (hl),a
0168   412E 11 09 00    	ld de,9
0169   4131 19          	add hl,de
0170   4132 77          	ld (hl),a
0171   4133 23          	inc hl
0172   4134 77          	ld (hl),a
0173   4135 03          	inc bc  ;add 1 to score
0174   4136 C5          	push bc  ;save score
0175   4137             	;wait routine
0176   4137 01 FF 1F    	ld bc,$1fff ;max waiting time
0177   413A             wait
0178   413A 0B          	dec bc
0179   413B 78          	ld a,b
0180   413C B1          	or c
0181   413D 20 FB       	jr nz, wait
0182   413F C3 C5 40    	jp principalloop
0183   4142             gameover
0184   4142 C1          	pop bc  ;retrieve score
0185   4143 E1          	pop hl  ;empty stack
0186   4144 FB          	ei
0187   4145 C9          	ret     ; game and tutorial written by Jon Kingsman
0188   4146             
0189   4146             fill_screen_with_char    ; adapted from http://swensont.epizy.com/ZX81Assembly.pdf screen1
0190   4146 2A 0C 40    	ld hl,(D_FILE) ; Get start of display
0191   4149 0E 16       	ld c,22 ; line counter (22 lines)
0192   414B             loop1
0193   414B 23          	inc hl ; get past EOL
0194   414C 06 20       	ld b,32 ; character counter (32 rows)
0195   414E             loop2 
0196   414E 36 08       	ld (HL),GREY_SQAURE ; print grey square character
0197   4150 23          	inc hl ; move to next print position
0198   4151 10 FB       	djnz loop2 ; Do it again until B=0
0199   4153 0D          	dec c ; next line
0200   4154 20 F5       	jr nz,loop1
0201   4156 C9          	ret 
0202   4157             
0203   4157             print_to_screen_at    ; adapted from http://swensont.epizy.com/ZX81Assembly.pdf screen1
0204   4157 2A 0C 40    	ld hl,(D_FILE) ; Get start of display
0205   415A 0E 16       	ld c,22 ; line counter (22 lines)
0206   415C             Ploop1
0207   415C 23          	inc hl ; get past EOL
0208   415D 06 20       	ld b,32 ; character counter (32 rows)
0209   415F             Ploop2 
0210   415F 36 08       	ld (HL),$08 ; print grey square character
0211   4161 23          	inc hl ; move to next print position
0212   4162 10 FB       	djnz Ploop2 ; Do it again until B=0
0213   4164 0D          	dec c ; next line
0214   4165 20 F5       	jr nz,Ploop1
0215   4167 C9          	ret 	
0216   4168             	
0217   4168             ;include our variables
0218   4168             #include "vars.asm"
0001+  4168             ;our variables 
0002+  4168             
0219   4168             
0220   4168             ; ===========================================================
0221   4168             ; code ends
0222   4168             ; ===========================================================
0223   4168             ;end the REM line and put in the RAND USR line to call our 'hex code'
0224   4168             #include "line2.asm"
0001+  4168             ;this is the end of line 1 - the REM	 		
0002+  4168 76          				DEFB $76                        ; Newline				
0003+  4169             ;followed by the the RAND USR line				
0004+  4169             Line1End       
0005+  4169 00 0A       Line2			DEFB $00,$0a
0006+  416B 0E 00                       DEFW Line2End-Line2Text
0007+  416D F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0008+  416F 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0008+  4173 20 
0009+  4174 7E                          DEFB $7E                        ; Number
0010+  4175 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0010+  4179 00 
0011+  417A 76                          DEFB $76                        ; Newline
0012+  417B             Line2End 
0225   417B             
0226   417B             ;display file defintion
0227   417B             #include "screen.asm"               
0001+  417B             ;ZX81 screens
0002+  417B             ; Display file (ZX81 screen) - low res screen 
0003+  417B 76          Display        	DEFB $76     
0004+  417C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 0
0004+  4180 00 00 00 00 
0004+  4184 00 00 00 00 
0004+  4188 00 00 00 00 
0004+  418C 00 00 00 00 
0004+  4190 00 00 00 00 
0004+  4194 00 00 00 00 
0004+  4198 00 00 00 00 
0004+  419C 76 
0005+  419D 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 1
0005+  41A1 00 00 00 00 
0005+  41A5 00 00 00 00 
0005+  41A9 00 00 00 00 
0005+  41AD 00 00 00 00 
0005+  41B1 00 00 00 00 
0005+  41B5 00 00 00 00 
0005+  41B9 00 00 00 00 
0005+  41BD 76 
0006+  41BE 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 2
0006+  41C2 00 00 00 00 
0006+  41C6 00 00 00 00 
0006+  41CA 00 00 00 00 
0006+  41CE 00 00 00 00 
0006+  41D2 00 00 00 00 
0006+  41D6 00 00 00 00 
0006+  41DA 00 00 00 00 
0006+  41DE 76 
0007+  41DF 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 3
0007+  41E3 00 00 00 00 
0007+  41E7 00 00 00 00 
0007+  41EB 00 00 00 00 
0007+  41EF 00 00 00 00 
0007+  41F3 00 00 00 00 
0007+  41F7 00 00 00 00 
0007+  41FB 00 00 00 00 
0007+  41FF 76 
0008+  4200 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 4
0008+  4204 00 00 00 00 
0008+  4208 00 00 00 00 
0008+  420C 00 00 00 00 
0008+  4210 00 00 00 00 
0008+  4214 00 00 00 00 
0008+  4218 00 00 00 00 
0008+  421C 00 00 00 00 
0008+  4220 76 
0009+  4221 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 5
0009+  4225 00 00 00 00 
0009+  4229 00 00 00 00 
0009+  422D 00 00 00 00 
0009+  4231 00 00 00 00 
0009+  4235 00 00 00 00 
0009+  4239 00 00 00 00 
0009+  423D 00 00 00 00 
0009+  4241 76 
0010+  4242 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 6
0010+  4246 00 00 00 00 
0010+  424A 00 00 00 00 
0010+  424E 00 00 00 00 
0010+  4252 00 00 00 00 
0010+  4256 00 00 00 00 
0010+  425A 00 00 00 00 
0010+  425E 00 00 00 00 
0010+  4262 76 
0011+  4263 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 7
0011+  4267 00 00 00 00 
0011+  426B 00 00 00 00 
0011+  426F 00 00 00 00 
0011+  4273 00 00 00 00 
0011+  4277 00 00 00 00 
0011+  427B 00 00 00 00 
0011+  427F 00 00 00 00 
0011+  4283 76 
0012+  4284 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 8
0012+  4288 00 00 00 00 
0012+  428C 00 00 00 00 
0012+  4290 00 00 00 00 
0012+  4294 00 00 00 00 
0012+  4298 00 00 00 00 
0012+  429C 00 00 00 00 
0012+  42A0 00 00 00 00 
0012+  42A4 76 
0013+  42A5 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 9
0013+  42A9 00 00 00 00 
0013+  42AD 00 00 00 00 
0013+  42B1 00 00 00 00 
0013+  42B5 00 00 00 00 
0013+  42B9 00 00 00 00 
0013+  42BD 00 00 00 00 
0013+  42C1 00 00 00 00 
0013+  42C5 76 
0014+  42C6 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 10
0014+  42CA 00 00 00 00 
0014+  42CE 00 00 00 00 
0014+  42D2 00 00 00 00 
0014+  42D6 00 00 00 00 
0014+  42DA 00 00 00 00 
0014+  42DE 00 00 00 00 
0014+  42E2 00 00 00 00 
0014+  42E6 76 
0015+  42E7 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 11
0015+  42EB 00 00 00 00 
0015+  42EF 00 00 00 00 
0015+  42F3 00 00 00 00 
0015+  42F7 00 00 00 00 
0015+  42FB 00 00 00 00 
0015+  42FF 00 00 00 00 
0015+  4303 00 00 00 00 
0015+  4307 76 
0016+  4308 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 12
0016+  430C 00 00 00 00 
0016+  4310 00 00 00 00 
0016+  4314 00 00 00 00 
0016+  4318 00 00 00 00 
0016+  431C 00 00 00 00 
0016+  4320 00 00 00 00 
0016+  4324 00 00 00 00 
0016+  4328 76 
0017+  4329 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 13
0017+  432D 00 00 00 00 
0017+  4331 00 00 00 00 
0017+  4335 00 00 00 00 
0017+  4339 00 00 00 00 
0017+  433D 00 00 00 00 
0017+  4341 00 00 00 00 
0017+  4345 00 00 00 00 
0017+  4349 76 
0018+  434A 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 14
0018+  434E 00 00 00 00 
0018+  4352 00 00 00 00 
0018+  4356 00 00 00 00 
0018+  435A 00 00 00 00 
0018+  435E 00 00 00 00 
0018+  4362 00 00 00 00 
0018+  4366 00 00 00 00 
0018+  436A 76 
0019+  436B 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 15
0019+  436F 00 00 00 00 
0019+  4373 00 00 00 00 
0019+  4377 00 00 00 00 
0019+  437B 00 00 00 00 
0019+  437F 00 00 00 00 
0019+  4383 00 00 00 00 
0019+  4387 00 00 00 00 
0019+  438B 76 
0020+  438C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 16
0020+  4390 00 00 00 00 
0020+  4394 00 00 00 00 
0020+  4398 00 00 00 00 
0020+  439C 00 00 00 00 
0020+  43A0 00 00 00 00 
0020+  43A4 00 00 00 00 
0020+  43A8 00 00 00 00 
0020+  43AC 76 
0021+  43AD 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 17
0021+  43B1 00 00 00 00 
0021+  43B5 00 00 00 00 
0021+  43B9 00 00 00 00 
0021+  43BD 00 00 00 00 
0021+  43C1 00 00 00 00 
0021+  43C5 00 00 00 00 
0021+  43C9 00 00 00 00 
0021+  43CD 76 
0022+  43CE 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 18
0022+  43D2 00 00 00 00 
0022+  43D6 00 00 00 00 
0022+  43DA 00 00 00 00 
0022+  43DE 00 00 00 00 
0022+  43E2 00 00 00 00 
0022+  43E6 00 00 00 00 
0022+  43EA 00 00 00 00 
0022+  43EE 76 
0023+  43EF 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 19
0023+  43F3 00 00 00 00 
0023+  43F7 00 00 00 00 
0023+  43FB 00 00 00 00 
0023+  43FF 00 00 00 00 
0023+  4403 00 00 00 00 
0023+  4407 00 00 00 00 
0023+  440B 00 00 00 00 
0023+  440F 76 
0024+  4410 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 20
0024+  4414 00 00 00 00 
0024+  4418 00 00 00 00 
0024+  441C 00 00 00 00 
0024+  4420 00 00 00 00 
0024+  4424 00 00 00 00 
0024+  4428 00 00 00 00 
0024+  442C 00 00 00 00 
0024+  4430 76 
0025+  4431 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 21
0025+  4435 00 00 00 00 
0025+  4439 00 00 00 00 
0025+  443D 00 00 00 00 
0025+  4441 00 00 00 00 
0025+  4445 00 00 00 00 
0025+  4449 00 00 00 00 
0025+  444D 00 00 00 00 
0025+  4451 76 
0026+  4452 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 22
0026+  4456 00 00 00 00 
0026+  445A 00 00 00 00 
0026+  445E 00 00 00 00 
0026+  4462 00 00 00 00 
0026+  4466 00 00 00 00 
0026+  446A 00 00 00 00 
0026+  446E 00 00 00 00 
0026+  4472 76 
0027+  4473 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 23
0027+  4477 00 00 00 00 
0027+  447B 00 00 00 00 
0027+  447F 00 00 00 00 
0027+  4483 00 00 00 00 
0027+  4487 00 00 00 00 
0027+  448B 00 00 00 00 
0027+  448F 00 00 00 00 
0027+  4493 76 
0028+  4494             
0228   4494             
0229   4494             ;close out the basic program
0230   4494             #include "endbasic.asm"
0001+  4494             ; close out the BASIC program structure
0002+  4494             ; BASIC Variables area 
0003+  4494             Variables:      
0004+  4494 80          VariablesEnd:   DEFB $80
0005+  4495             BasicEnd:                              
0006+  4495             
0007+  4495             
0008+  4495             #END
tasm: Number of errors = 0
