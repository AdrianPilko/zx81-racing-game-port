0001   0000             ;;;;;;;;;;;;;;;;;;;;;
0002   0000             ;test program screen scroll
0003   0000             ;;;;;;;;;;;;;;;;;;;;;
0004   0000             
0005   0000             #include "zx81defs.asm" ;; https://www.sinclairzxworld.com/viewtopic.php?t=2186&start=40
0001+  0000             ;defines to make us feel more at home
0002+  0000             #define         DEFB .BYTE 
0003+  0000             #define         DEFW .WORD
0004+  0000             #define         DEFM .TEXT
0005+  0000             #define         ORG  .ORG
0006+  0000             #define         EQU  .EQU
0006   0000             ;EQUs for ROM routines
0007   0000             #include "zx81rom.asm"
0001+  0000             ;ZX81 ROM routines 
0002+  0000             PRINT			EQU $10
0003+  0000             PRINTAT			EQU $08F5
0004+  0000             DISPROUT		EQU $0281
0005+  0000             ;D_FILE			EQU	$400C
0006+  0000             DISPLAY_3		EQU $0292 ;restore registers after a 'slow' display
0007+  0000             DISPLAY_5		EQU $02B5
0008+  0000             PLOT			EQU $0BB2 	; note ROM plot is 0baf - however first thing it does try to pull BC from the calculator stack
0009+  0000             							; so we'll skip past that and set BC ourselves
0010+  0000             CLS				EQU $0A2A
0011+  0000             KSCAN           EQU $02BB 
0012+  0000             FINDCHR         EQU $07BD
0013+  0000             COPY            EQU $0869
0014+  0000             FAST            EQU $0F23
0015+  0000             SLOW            EQU $0F2B
0016+  0000             SLOWORFAST		EQU $0207
0017+  0000             PAUSE			EQU $0F32
0018+  0000             SCROLL 			EQU $0C0E
0019+  0000             ;sys vars
0020+  0000             ERR_NR			EQU $40000008   0000             ;ZX81 char codes/how to survive without ASCII
0009   0000             #include "charcodes.asm"
0001+  0000             ; ZX81 Characters. 
0002+  0000             __:				EQU	$00	;spacja
0003+  0000             _QT:			EQU	$0B	;"
0004+  0000             _PD:			EQU	$0C	;funt 
0005+  0000             _SD:			EQU	$0D	;$
0006+  0000             _CL:			EQU	$0E	;:
0007+  0000             _QM:			EQU	$0F	;?
0008+  0000             _OP:			EQU	$10	;(
0009+  0000             _CP:			EQU	$11	;)
0010+  0000             _GT:			EQU	$12	;>
0011+  0000             _LT:			EQU	$13	;<
0012+  0000             _EQ:			EQU	$14	;=
0013+  0000             _PL:			EQU	$15	;+
0014+  0000             _MI:			EQU	$16	;-
0015+  0000             _AS:			EQU	$17	;*
0016+  0000             _SL:			EQU	$18	;/
0017+  0000             _SC:			EQU	$19	;;
0018+  0000             _CM:			EQU	$1A	;,
0019+  0000             _DT:			EQU	$1B	;.
0020+  0000             _NL:			EQU	$76	;NEWLINE
0021+  0000             
0022+  0000             _0				EQU $1C
0023+  0000             _1				EQU $1D
0024+  0000             _2				EQU $1E
0025+  0000             _3				EQU $1F
0026+  0000             _4				EQU $20
0027+  0000             _5				EQU $21
0028+  0000             _6				EQU $22
0029+  0000             _7				EQU $23
0030+  0000             _8				EQU $24
0031+  0000             _9				EQU $25
0032+  0000             _A				EQU $26
0033+  0000             _B				EQU $27
0034+  0000             _C				EQU $28
0035+  0000             _D				EQU $29
0036+  0000             _E				EQU $2A
0037+  0000             _F				EQU $2B
0038+  0000             _G				EQU $2C
0039+  0000             _H				EQU $2D
0040+  0000             _I				EQU $2E
0041+  0000             _J				EQU $2F
0042+  0000             _K				EQU $30
0043+  0000             _L				EQU $31
0044+  0000             _M				EQU $32
0045+  0000             _N				EQU $33
0046+  0000             _O				EQU $34
0047+  0000             _P				EQU $35
0048+  0000             _Q				EQU $36
0049+  0000             _R				EQU $37
0050+  0000             _S				EQU $38
0051+  0000             _T				EQU $39
0052+  0000             _U				EQU $3A
0053+  0000             _V				EQU $3B
0054+  0000             _W				EQU $3C
0055+  0000             _X				EQU $3D
0056+  0000             _Y				EQU $3E
0057+  0000             _Z				EQU $3F
0010   0000             ;system variables
0011   0000             #include "zx81sys.asm"
0001+  0000             ;system variables
0002+  0000             ;Origin of a ZX81 file is always 16393 
0003+  0000             
0004+  4009                             ORG 16393
0005+  4009                             
0006+  4009             ; System variables live here
0007+  4009 00          VERSN:          DEFB 0
0008+  400A 02 00       E_PPC:          DEFW 2
0009+  400C 56 41       D_FILE:         DEFW Display
0010+  400E 57 41       DF_CC:          DEFW Display+1                  ; First character of display
0011+  4010 6F 44       VARS:           DEFW Variables
0012+  4012 00 00       DEST:           DEFW 0
0013+  4014 70 44       E_LINE:         DEFW BasicEnd 
0014+  4016 74 44       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0015+  4018 00 00       X_PTR:          DEFW 0
0016+  401A 75 44       STKBOT:         DEFW BasicEnd+5
0017+  401C 75 44       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0018+  401E 00          BREG:           DEFB 0
0019+  401F 5D 40       MEM:            DEFW MEMBOT
0020+  4021 00          UNUSED1:        DEFB 0
0021+  4022 02          DF_SZ:          DEFB 2
0022+  4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0023+  4025 BF FD       LAST_K:         DEFW $fdbf
0024+  4027 0F          DEBOUN:         DEFB 15
0025+  4028 37          MARGIN:         DEFB 55
0026+  4029 44 41       NXTLIN:         DEFW Line2                      ; Next line address
0027+  402B 00 00       OLDPPC:         DEFW 0
0028+  402D 00          FLAGX:          DEFB 0
0029+  402E 00 00       STRLEN:         DEFW 0
0030+  4030 8D 0C       T_ADDR:         DEFW $0c8d
0031+  4032 00 00       SEED:           DEFW 0
0032+  4034 A3 F5       FRAMES:         DEFW $f5a3
0033+  4036 00 00       COORDS:         DEFW 0
0034+  4038 BC          PR_CC:          DEFB $bc
0035+  4039 21 18       S_POSN:         DEFW $1821
0036+  403B 40          CDFLAG:         DEFB $40
0037+  403C 00 00 00 00 PRBUFF:         DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$76 ; 32 Spaces + Newline
0037+  4040 00 00 00 00 
0037+  4044 00 00 00 00 
0037+  4048 00 00 00 00 
0037+  404C 00 00 00 00 
0037+  4050 00 00 00 00 
0037+  4054 00 00 00 00 
0037+  4058 00 00 00 00 
0037+  405C 76 
0038+  405D 00 00 00 00 MEMBOT:         DEFB 0,0,0,0,0,0,0,0,0,0,$84,$20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 30 zeros
0038+  4061 00 00 00 00 
0038+  4065 00 00 84 20 
0038+  4069 00 00 00 00 
0038+  406D 00 00 00 00 
0038+  4071 00 00 00 00 
0038+  4075 00 00 00 00 
0038+  4079 00 00 
0039+  407B 00 00       UNUNSED2:       DEFW 0
0040+  407D             
0041+  407D             ; End of system variables
0042+  407D             
0012   407D             
0013   407D             ;the standard REM statement that will contain our 'hex' code
0014   407D             #include "line1.asm"
0001+  407D             ;Line 1 
0002+  407D             ;this is the REM statement...
0003+  407D 00 00       Line1:          DEFB $00,$00                    ; Line 1
0004+  407F C3 00                       DEFW Line1End-Line1Text         ; Line 1 length
0005+  4081 EA          Line1Text:      DEFB $ea                        ; REM             
0006+  4082             
0015   4082             
0016   4082             ; these variables need converting to screen addresses for zx81
0017   4082             ; problem with zx81 is the screen display D_FILE memory address changes with size of basic program 
0018   4082             ; see https://www.sinclairzxworld.com/viewtopic.php?t=3919
0019   4082             ; (the asm here is converted to one line of basic)
0020   4082             #define ROWS_IN_SCREEN 24
0021   4082             #define COL_IN_SCREEN 32
0022   4082             #define ROAD_SCREEN_MEM_OFFSET 9    
0023   4082             #define WIDTH_OF_ROAD 9
0024   4082             #define CAR_SCREEN_MEM_START_OFFSET 773
0025   4082             ;#define SCREEN_MEM_OFFSET_TO_LAST_ROW 736
0026   4082             #define ROADFROM_SCREEN_MEM_LOCATION 769
0027   4082             #define ROADTO_SCREEN_MEM_LOCATION 778
0028   4082             #define RANDOM_BYTES_MEM_LOCATION 2000
0029   4082             ;((32*23)-1)
0030   4082             #define SCREEN_SCROLL_MEM_OFFSET 735
0031   4082             
0032   4082             
0033   4082             ;D_FILE is location of screen memory (which moves depending on length of basic, but should be fixed after program is loaded
0034   4082             ; probably should run some code to detect if this is 1K or 16K as well, or just have 2 verisons 1K and 16K
0035   4082             #define D_FILE 16396
0036   4082             ;black block
0037   4082             #define CAR_CHARACTER_CODE 128  
0038   4082             ;blank space
0039   4082             #define NOT_CAR_CHARACTER_CODE 0
0040   4082             ;blank space
0041   4082             #define NOT_ROAD_CHARACTER_CODE 0
0042   4082             ;black grey block
0043   4082             #define ROAD_CHARACTER_CODE 136
0044   4082             #define ROAD_START_MARKER_CHARACTER_CODE 138
0045   4082             
0046   4082             #define GREY_SQAURE 8  
0047   4082             
0048   4082             ; keyboard port for shift key to v
0049   4082             #define KEYBOARD_READ_PORT_SHIFT_TO_V $FE
0050   4082             ; keyboard space to b
0051   4082             #define KEYBOARD_READ_PORT_SPACE_TO_B $7F 
0052   4082             ; starting port numbner for keyboard, is same as first port for shift to v
0053   4082             #define KEYBOARD_READ_PORT $FE 
0054   4082             
0055   4082 C3 BA 40    	jp main
0056   4085             
0057   4085             var_car_pos 
0058   4085 00 00       	DEFB 0,0
0059   4087             var_road_left_addr
0060   4087 00 00       	DEFB 0,0
0061   4089             var_road_right_addr
0062   4089 00 00       	DEFB 0,0	
0063   408B             var_road_pos
0064   408B 00 00       	DEFB 0,0
0065   408D             var_scroll_road_from
0066   408D 00 00       	DEFB 0,0
0067   408F             var_scroll_road_to
0068   408F 00 00       	DEFB 0,0
0069   4091             to_print_mem
0070   4091 00 00       	DEFB 0,0
0071   4093             	
0072   4093             roadCharacter
0073   4093 00          	DEFB 0
0074   4094             roadCharacterControl
0075   4094 00          	DEFB 0	
0076   4095             
0077   4095             to_print .equ to_print_mem ;use hprint16
0078   4095             	
0079   4095             
0080   4095             hprint16  ; print one 2byte number stored in location $to_print
0081   4095             	;ld hl,$to_print
0082   4095 21 93 40    	ld hl,$to_print+2
0083   4098 06 02       	ld b,2	
0084   409A             hprint16_loop	
0085   409A 7E          	ld a, (hl)
0086   409B F5          	push af ;store the original value of a for later
0087   409C E6 F0       	and $f0 ; isolate the first digit
0088   409E 1F          	rra
0089   409F 1F          	rra
0090   40A0 1F          	rra
0091   40A1 1F          	rra
0092   40A2 C6 1C       	add a,$1c ; add 28 to the character code
0093   40A4 CD 10 00    	call PRINT ;
0094   40A7 F1          	pop af ; retrieve original value of a
0095   40A8 E6 0F       	and $0f ; isolate the second digit
0096   40AA C6 1C       	add a,$1c ; add 28 to the character code
0097   40AC CD 10 00    	call PRINT
0098   40AF 3E 00       	ld a, 00;_NL ;print new line ; 00 is space
0099   40B1             	;call PRINT ; print a space character
0100   40B1             	
0101   40B1 2B          	dec hl
0102   40B2 10 E6       	djnz hprint16_loop
0103   40B4             	; restore registers
0104   40B4 3E 76       	ld a, _NL
0105   40B6 CD 10 00    	call PRINT
0106   40B9 C9          	ret
0107   40BA             
0108   40BA             
0109   40BA             main
0110   40BA CD 2A 0A    	call CLS	
0111   40BD             		
0112   40BD             	;; initialise the scroll from and too, 
0113   40BD             	;; scroll from is the D_FILE+(cols*(rows-1)-1
0114   40BD             	;; scroll to is the D_FILE + (cols*rows)-1     (= scroll from + 32)
0115   40BD 2A 0C 40    	ld hl,(D_FILE) ;initialise road start memory address
0116   40C0 11 DF 02    	ld de, SCREEN_SCROLL_MEM_OFFSET
0117   40C3 19          	add hl, de	
0118   40C4 22 8D 40    	ld (var_scroll_road_from), hl
0119   40C7 11 15 00    	ld de, 21
0120   40CA 19          	add hl, de
0121   40CB 22 8F 40    	ld (var_scroll_road_to), hl
0122   40CE             
0123   40CE 2A 0C 40    	ld hl,(D_FILE) ;initialise road start memory address
0124   40D1 11 09 00    	ld de, ROAD_SCREEN_MEM_OFFSET
0125   40D4 19          	add hl, de	
0126   40D5             
0127   40D5 3E 88       	ld a, 136
0128   40D7 06 18       	ld b,24 ; for this debug version do half and alternate pattern to see scroll
0129   40D9             initialiseRoad  ;; was fillscreen in zx spectrum version, initialiseRoad is beter name of what it's doing!!
0130   40D9             	
0131   40D9 77          	ld (hl),a    ;; road starts as two staight vertical lines 
0132   40DA 23          	inc hl   	 ;; make each edge of road 2 characters wide
0133   40DB 77          	ld (hl),a   	
0134   40DC 22 87 40    	ld (var_road_left_addr),hl ; store road left pos (every time but on last iteration will be correct for last row	
0135   40DF 11 09 00    	ld de,WIDTH_OF_ROAD   
0136   40E2 19          	add hl,de			  ;; add offset to get to other side of road	
0137   40E3 22 89 40    	ld (var_road_right_addr),hl ; store road right pos (every time but on last iteration will be correct for last row
0138   40E6 77          	ld (hl),a				;; make each edge of road 2 characters wide
0139   40E7 23          	inc hl					
0140   40E8 77          	ld (hl),a
0141   40E9 11 16 00    	ld de,22  ;; on zx spectrum had ld de,21, but end of line on zx81 has chr$128 needs skip
0142   40EC             
0143   40EC 19          	add hl,de
0144   40ED 10 EA       	djnz initialiseRoad	
0145   40EF             	
0146   40EF 3E 88       	ld a, 136
0147   40F1 32 93 40    	ld (roadCharacter), a
0148   40F4 3E 02       	ld a, 2
0149   40F6 32 94 40    	ld (roadCharacterControl), a
0150   40F9             	
0151   40F9             principalloop
0152   40F9             	;scroll road	
0153   40F9 2A 8D 40    	ld hl,(var_scroll_road_from)  ; load left road address	
0154   40FC ED 5B 8F 40 	ld de,(var_scroll_road_to) ; load right road address		
0155   4100 01 E1 02    	ld bc,737					; 736 = 32columns * 23 rows
0156   4103             	; LDDR repeats the instruction LDD (Does a LD (DE),(HL) and decrements 
0157   4103             	; each of DE, HL, and BC) until BC=0. Note that if BC=0 before 
0158   4103             	; the start of the routine, it will try loop around until BC=0 again.	
0159   4103 ED B8       	lddr
0160   4105             
0161   4105             	
0162   4105 AF          	xor a  ;print new road
0163   4106             	
0164   4106 3A 93 40    	ld a, (roadCharacter)
0165   4109             	
0166   4109 2A 0C 40    	ld hl,(D_FILE) ; road start memory address
0167   410C 11 09 00    	ld de, ROAD_SCREEN_MEM_OFFSET
0168   410F 19          	add hl, de	
0169   4110             	
0170   4110 77          	ld (hl),a
0171   4111 23          	inc hl
0172   4112 77          	ld (hl),a
0173   4113 11 09 00    	ld de,WIDTH_OF_ROAD
0174   4116 19          	add hl,de
0175   4117 77          	ld (hl),a
0176   4118 23          	inc hl
0177   4119 77          	ld (hl),a
0178   411A             
0179   411A             ;toggle road character to show if scrolling is working
0180   411A AF          	xor a  ;print new road
0181   411B 3A 94 40    	ld a,(roadCharacterControl)
0182   411E 3D          	dec a
0183   411F 32 94 40    	ld (roadCharacterControl),a
0184   4122 3E 88       	ld a, 136
0185   4124 32 93 40    	ld (roadCharacter), a
0186   4127 C2 37 41    	jp nz, preWaitloop
0187   412A 3E 02       	ld a, 2
0188   412C 32 94 40    	ld (roadCharacterControl), a
0189   412F 3E 80       	ld a, 128
0190   4131 32 93 40    	ld (roadCharacter), a
0191   4134 C3 F9 40    	jp principalloop
0192   4137             preWaitloop	
0193   4137 01 FF 05    	ld bc,$05ff ;max waiting time
0194   413A             waitloop
0195   413A 0B          	dec bc
0196   413B 78          	ld a,b
0197   413C B1          	or c
0198   413D 20 FB       	jr nz, waitloop
0199   413F C3 F9 40    	jp principalloop
0200   4142             gameover
0201   4142 C9          	ret     ; game and tutorial written by Jon Kingsman
0202   4143             
0203   4143             ;include our variables
0204   4143             #include "vars.asm"
0001+  4143             ;our variables 
0002+  4143             
0205   4143             
0206   4143             ; ===========================================================
0207   4143             ; code ends
0208   4143             ; ===========================================================
0209   4143             ;end the REM line and put in the RAND USR line to call our 'hex code'
0210   4143             #include "line2.asm"
0001+  4143             ;this is the end of line 1 - the REM	 		
0002+  4143 76          				DEFB $76                        ; Newline				
0003+  4144             ;followed by the the RAND USR line				
0004+  4144             Line1End       
0005+  4144 00 0A       Line2			DEFB $00,$0a
0006+  4146 0E 00                       DEFW Line2End-Line2Text
0007+  4148 F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0008+  414A 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0008+  414E 20 
0009+  414F 7E                          DEFB $7E                        ; Number
0010+  4150 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0010+  4154 00 
0011+  4155 76                          DEFB $76                        ; Newline
0012+  4156             Line2End 
0211   4156             
0212   4156             ;display file defintion
0213   4156             #include "screen.asm"               
0001+  4156             ;ZX81 screens
0002+  4156             ; Display file (ZX81 screen) - low res screen 
0003+  4156 76          Display        	DEFB $76     
0004+  4157 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 0
0004+  415B 00 00 00 00 
0004+  415F 00 00 00 00 
0004+  4163 00 00 00 00 
0004+  4167 00 00 00 00 
0004+  416B 00 00 00 00 
0004+  416F 00 00 00 00 
0004+  4173 00 00 00 00 
0004+  4177 76 
0005+  4178 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 1
0005+  417C 00 00 00 00 
0005+  4180 00 00 00 00 
0005+  4184 00 00 00 00 
0005+  4188 00 00 00 00 
0005+  418C 00 00 00 00 
0005+  4190 00 00 00 00 
0005+  4194 00 00 00 00 
0005+  4198 76 
0006+  4199 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 2
0006+  419D 00 00 00 00 
0006+  41A1 00 00 00 00 
0006+  41A5 00 00 00 00 
0006+  41A9 00 00 00 00 
0006+  41AD 00 00 00 00 
0006+  41B1 00 00 00 00 
0006+  41B5 00 00 00 00 
0006+  41B9 76 
0007+  41BA 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 3
0007+  41BE 00 00 00 00 
0007+  41C2 00 00 00 00 
0007+  41C6 00 00 00 00 
0007+  41CA 00 00 00 00 
0007+  41CE 00 00 00 00 
0007+  41D2 00 00 00 00 
0007+  41D6 00 00 00 00 
0007+  41DA 76 
0008+  41DB 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 4
0008+  41DF 00 00 00 00 
0008+  41E3 00 00 00 00 
0008+  41E7 00 00 00 00 
0008+  41EB 00 00 00 00 
0008+  41EF 00 00 00 00 
0008+  41F3 00 00 00 00 
0008+  41F7 00 00 00 00 
0008+  41FB 76 
0009+  41FC 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 5
0009+  4200 00 00 00 00 
0009+  4204 00 00 00 00 
0009+  4208 00 00 00 00 
0009+  420C 00 00 00 00 
0009+  4210 00 00 00 00 
0009+  4214 00 00 00 00 
0009+  4218 00 00 00 00 
0009+  421C 76 
0010+  421D 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 6
0010+  4221 00 00 00 00 
0010+  4225 00 00 00 00 
0010+  4229 00 00 00 00 
0010+  422D 00 00 00 00 
0010+  4231 00 00 00 00 
0010+  4235 00 00 00 00 
0010+  4239 00 00 00 00 
0010+  423D 76 
0011+  423E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 7
0011+  4242 00 00 00 00 
0011+  4246 00 00 00 00 
0011+  424A 00 00 00 00 
0011+  424E 00 00 00 00 
0011+  4252 00 00 00 00 
0011+  4256 00 00 00 00 
0011+  425A 00 00 00 00 
0011+  425E 76 
0012+  425F 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 8
0012+  4263 00 00 00 00 
0012+  4267 00 00 00 00 
0012+  426B 00 00 00 00 
0012+  426F 00 00 00 00 
0012+  4273 00 00 00 00 
0012+  4277 00 00 00 00 
0012+  427B 00 00 00 00 
0012+  427F 76 
0013+  4280 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 9
0013+  4284 00 00 00 00 
0013+  4288 00 00 00 00 
0013+  428C 00 00 00 00 
0013+  4290 00 00 00 00 
0013+  4294 00 00 00 00 
0013+  4298 00 00 00 00 
0013+  429C 00 00 00 00 
0013+  42A0 76 
0014+  42A1 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 10
0014+  42A5 00 00 00 00 
0014+  42A9 00 00 00 00 
0014+  42AD 00 00 00 00 
0014+  42B1 00 00 00 00 
0014+  42B5 00 00 00 00 
0014+  42B9 00 00 00 00 
0014+  42BD 00 00 00 00 
0014+  42C1 76 
0015+  42C2 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 11
0015+  42C6 00 00 00 00 
0015+  42CA 00 00 00 00 
0015+  42CE 00 00 00 00 
0015+  42D2 00 00 00 00 
0015+  42D6 00 00 00 00 
0015+  42DA 00 00 00 00 
0015+  42DE 00 00 00 00 
0015+  42E2 76 
0016+  42E3 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 12
0016+  42E7 00 00 00 00 
0016+  42EB 00 00 00 00 
0016+  42EF 00 00 00 00 
0016+  42F3 00 00 00 00 
0016+  42F7 00 00 00 00 
0016+  42FB 00 00 00 00 
0016+  42FF 00 00 00 00 
0016+  4303 76 
0017+  4304 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 13
0017+  4308 00 00 00 00 
0017+  430C 00 00 00 00 
0017+  4310 00 00 00 00 
0017+  4314 00 00 00 00 
0017+  4318 00 00 00 00 
0017+  431C 00 00 00 00 
0017+  4320 00 00 00 00 
0017+  4324 76 
0018+  4325 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 14
0018+  4329 00 00 00 00 
0018+  432D 00 00 00 00 
0018+  4331 00 00 00 00 
0018+  4335 00 00 00 00 
0018+  4339 00 00 00 00 
0018+  433D 00 00 00 00 
0018+  4341 00 00 00 00 
0018+  4345 76 
0019+  4346 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 15
0019+  434A 00 00 00 00 
0019+  434E 00 00 00 00 
0019+  4352 00 00 00 00 
0019+  4356 00 00 00 00 
0019+  435A 00 00 00 00 
0019+  435E 00 00 00 00 
0019+  4362 00 00 00 00 
0019+  4366 76 
0020+  4367 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 16
0020+  436B 00 00 00 00 
0020+  436F 00 00 00 00 
0020+  4373 00 00 00 00 
0020+  4377 00 00 00 00 
0020+  437B 00 00 00 00 
0020+  437F 00 00 00 00 
0020+  4383 00 00 00 00 
0020+  4387 76 
0021+  4388 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 17
0021+  438C 00 00 00 00 
0021+  4390 00 00 00 00 
0021+  4394 00 00 00 00 
0021+  4398 00 00 00 00 
0021+  439C 00 00 00 00 
0021+  43A0 00 00 00 00 
0021+  43A4 00 00 00 00 
0021+  43A8 76 
0022+  43A9 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 18
0022+  43AD 00 00 00 00 
0022+  43B1 00 00 00 00 
0022+  43B5 00 00 00 00 
0022+  43B9 00 00 00 00 
0022+  43BD 00 00 00 00 
0022+  43C1 00 00 00 00 
0022+  43C5 00 00 00 00 
0022+  43C9 76 
0023+  43CA 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 19
0023+  43CE 00 00 00 00 
0023+  43D2 00 00 00 00 
0023+  43D6 00 00 00 00 
0023+  43DA 00 00 00 00 
0023+  43DE 00 00 00 00 
0023+  43E2 00 00 00 00 
0023+  43E6 00 00 00 00 
0023+  43EA 76 
0024+  43EB 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 20
0024+  43EF 00 00 00 00 
0024+  43F3 00 00 00 00 
0024+  43F7 00 00 00 00 
0024+  43FB 00 00 00 00 
0024+  43FF 00 00 00 00 
0024+  4403 00 00 00 00 
0024+  4407 00 00 00 00 
0024+  440B 76 
0025+  440C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 21
0025+  4410 00 00 00 00 
0025+  4414 00 00 00 00 
0025+  4418 00 00 00 00 
0025+  441C 00 00 00 00 
0025+  4420 00 00 00 00 
0025+  4424 00 00 00 00 
0025+  4428 00 00 00 00 
0025+  442C 76 
0026+  442D 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 22
0026+  4431 00 00 00 00 
0026+  4435 00 00 00 00 
0026+  4439 00 00 00 00 
0026+  443D 00 00 00 00 
0026+  4441 00 00 00 00 
0026+  4445 00 00 00 00 
0026+  4449 00 00 00 00 
0026+  444D 76 
0027+  444E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 23
0027+  4452 00 00 00 00 
0027+  4456 00 00 00 00 
0027+  445A 00 00 00 00 
0027+  445E 00 00 00 00 
0027+  4462 00 00 00 00 
0027+  4466 00 00 00 00 
0027+  446A 00 00 00 00 
0027+  446E 76 
0028+  446F             
0214   446F             
0215   446F             ;close out the basic program
0216   446F             #include "endbasic.asm"
0001+  446F             ; close out the BASIC program structure
0002+  446F             ; BASIC Variables area 
0003+  446F             Variables:      
0004+  446F 80          VariablesEnd:   DEFB $80
0005+  4470             BasicEnd:                              
0006+  4470             
0007+  4470             
0008+  4470             #END
tasm: Number of errors = 0
