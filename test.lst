0001   0000             ;;;;;;;;;;;;;;;;;;;;;
0002   0000             ;test program screen scroll
0003   0000             ;;;;;;;;;;;;;;;;;;;;;
0004   0000             
0005   0000             #include "zx81defs.asm" ;; https://www.sinclairzxworld.com/viewtopic.php?t=2186&start=40
0001+  0000             ;defines to make us feel more at home
0002+  0000             #define         DEFB .BYTE 
0003+  0000             #define         DEFW .WORD
0004+  0000             #define         DEFM .TEXT
0005+  0000             #define         ORG  .ORG
0006+  0000             #define         EQU  .EQU
0006   0000             ;EQUs for ROM routines
0007   0000             #include "zx81rom.asm"
0001+  0000             ;ZX81 ROM routines 
0002+  0000             PRINT			EQU $10
0003+  0000             PRINTAT			EQU $08F5
0004+  0000             DISPROUT		EQU $0281
0005+  0000             ;D_FILE			EQU	$400C
0006+  0000             DISPLAY_3		EQU $0292 ;restore registers after a 'slow' display
0007+  0000             DISPLAY_5		EQU $02B5
0008+  0000             PLOT			EQU $0BB2 	; note ROM plot is 0baf - however first thing it does try to pull BC from the calculator stack
0009+  0000             							; so we'll skip past that and set BC ourselves
0010+  0000             CLS				EQU $0A2A
0011+  0000             KSCAN           EQU $02BB 
0012+  0000             FINDCHR         EQU $07BD
0013+  0000             COPY            EQU $0869
0014+  0000             FAST            EQU $0F23
0015+  0000             SLOW            EQU $0F2B
0016+  0000             SLOWORFAST		EQU $0207
0017+  0000             PAUSE			EQU $0F32
0018+  0000             SCROLL 			EQU $0C0E
0019+  0000             ;sys vars
0020+  0000             ERR_NR			EQU $40000008   0000             ;ZX81 char codes/how to survive without ASCII
0009   0000             #include "charcodes.asm"
0001+  0000             ; ZX81 Characters. 
0002+  0000             __:				EQU	$00	;spacja
0003+  0000             _QT:			EQU	$0B	;"
0004+  0000             _PD:			EQU	$0C	;funt 
0005+  0000             _SD:			EQU	$0D	;$
0006+  0000             _CL:			EQU	$0E	;:
0007+  0000             _QM:			EQU	$0F	;?
0008+  0000             _OP:			EQU	$10	;(
0009+  0000             _CP:			EQU	$11	;)
0010+  0000             _GT:			EQU	$12	;>
0011+  0000             _LT:			EQU	$13	;<
0012+  0000             _EQ:			EQU	$14	;=
0013+  0000             _PL:			EQU	$15	;+
0014+  0000             _MI:			EQU	$16	;-
0015+  0000             _AS:			EQU	$17	;*
0016+  0000             _SL:			EQU	$18	;/
0017+  0000             _SC:			EQU	$19	;;
0018+  0000             _CM:			EQU	$1A	;,
0019+  0000             _DT:			EQU	$1B	;.
0020+  0000             _NL:			EQU	$76	;NEWLINE
0021+  0000             
0022+  0000             _0				EQU $1C
0023+  0000             _1				EQU $1D
0024+  0000             _2				EQU $1E
0025+  0000             _3				EQU $1F
0026+  0000             _4				EQU $20
0027+  0000             _5				EQU $21
0028+  0000             _6				EQU $22
0029+  0000             _7				EQU $23
0030+  0000             _8				EQU $24
0031+  0000             _9				EQU $25
0032+  0000             _A				EQU $26
0033+  0000             _B				EQU $27
0034+  0000             _C				EQU $28
0035+  0000             _D				EQU $29
0036+  0000             _E				EQU $2A
0037+  0000             _F				EQU $2B
0038+  0000             _G				EQU $2C
0039+  0000             _H				EQU $2D
0040+  0000             _I				EQU $2E
0041+  0000             _J				EQU $2F
0042+  0000             _K				EQU $30
0043+  0000             _L				EQU $31
0044+  0000             _M				EQU $32
0045+  0000             _N				EQU $33
0046+  0000             _O				EQU $34
0047+  0000             _P				EQU $35
0048+  0000             _Q				EQU $36
0049+  0000             _R				EQU $37
0050+  0000             _S				EQU $38
0051+  0000             _T				EQU $39
0052+  0000             _U				EQU $3A
0053+  0000             _V				EQU $3B
0054+  0000             _W				EQU $3C
0055+  0000             _X				EQU $3D
0056+  0000             _Y				EQU $3E
0057+  0000             _Z				EQU $3F
0010   0000             ;system variables
0011   0000             #include "zx81sys.asm"
0001+  0000             ;system variables
0002+  0000             ;Origin of a ZX81 file is always 16393 
0003+  0000             
0004+  4009                             ORG 16393
0005+  4009                             
0006+  4009             ; System variables live here
0007+  4009 00          VERSN:          DEFB 0
0008+  400A 02 00       E_PPC:          DEFW 2
0009+  400C AA 41       D_FILE:         DEFW Display
0010+  400E AB 41       DF_CC:          DEFW Display+1                  ; First character of display
0011+  4010 C3 44       VARS:           DEFW Variables
0012+  4012 00 00       DEST:           DEFW 0
0013+  4014 C4 44       E_LINE:         DEFW BasicEnd 
0014+  4016 C8 44       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0015+  4018 00 00       X_PTR:          DEFW 0
0016+  401A C9 44       STKBOT:         DEFW BasicEnd+5
0017+  401C C9 44       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0018+  401E 00          BREG:           DEFB 0
0019+  401F 5D 40       MEM:            DEFW MEMBOT
0020+  4021 00          UNUSED1:        DEFB 0
0021+  4022 02          DF_SZ:          DEFB 2
0022+  4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0023+  4025 BF FD       LAST_K:         DEFW $fdbf
0024+  4027 0F          DEBOUN:         DEFB 15
0025+  4028 37          MARGIN:         DEFB 55
0026+  4029 98 41       NXTLIN:         DEFW Line2                      ; Next line address
0027+  402B 00 00       OLDPPC:         DEFW 0
0028+  402D 00          FLAGX:          DEFB 0
0029+  402E 00 00       STRLEN:         DEFW 0
0030+  4030 8D 0C       T_ADDR:         DEFW $0c8d
0031+  4032 00 00       SEED:           DEFW 0
0032+  4034 A3 F5       FRAMES:         DEFW $f5a3
0033+  4036 00 00       COORDS:         DEFW 0
0034+  4038 BC          PR_CC:          DEFB $bc
0035+  4039 21 18       S_POSN:         DEFW $1821
0036+  403B 40          CDFLAG:         DEFB $40
0037+  403C 00 00 00 00 PRBUFF:         DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$76 ; 32 Spaces + Newline
0037+  4040 00 00 00 00 
0037+  4044 00 00 00 00 
0037+  4048 00 00 00 00 
0037+  404C 00 00 00 00 
0037+  4050 00 00 00 00 
0037+  4054 00 00 00 00 
0037+  4058 00 00 00 00 
0037+  405C 76 
0038+  405D 00 00 00 00 MEMBOT:         DEFB 0,0,0,0,0,0,0,0,0,0,$84,$20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 30 zeros
0038+  4061 00 00 00 00 
0038+  4065 00 00 84 20 
0038+  4069 00 00 00 00 
0038+  406D 00 00 00 00 
0038+  4071 00 00 00 00 
0038+  4075 00 00 00 00 
0038+  4079 00 00 
0039+  407B 00 00       UNUNSED2:       DEFW 0
0040+  407D             
0041+  407D             ; End of system variables
0042+  407D             
0012   407D             
0013   407D             ;the standard REM statement that will contain our 'hex' code
0014   407D             #include "line1.asm"
0001+  407D             ;Line 1 
0002+  407D             ;this is the REM statement...
0003+  407D 00 00       Line1:          DEFB $00,$00                    ; Line 1
0004+  407F 17 01                       DEFW Line1End-Line1Text         ; Line 1 length
0005+  4081 EA          Line1Text:      DEFB $ea                        ; REM             
0006+  4082             
0015   4082             
0016   4082             ; these variables need converting to screen addresses for zx81
0017   4082             ; problem with zx81 is the screen display D_FILE memory address changes with size of basic program 
0018   4082             ; see https://www.sinclairzxworld.com/viewtopic.php?t=3919
0019   4082             ; (the asm here is converted to one line of basic)
0020   4082             #define ROWS_IN_SCREEN 24
0021   4082             #define COL_IN_SCREEN 32
0022   4082             #define ROAD_SCREEN_MEM_OFFSET 9    
0023   4082             #define WIDTH_OF_ROAD 9
0024   4082             #define CAR_SCREEN_MEM_START_OFFSET 773
0025   4082             ;#define SCREEN_MEM_OFFSET_TO_LAST_ROW 736
0026   4082             #define ROADFROM_SCREEN_MEM_LOCATION 769
0027   4082             #define ROADTO_SCREEN_MEM_LOCATION 778
0028   4082             #define RANDOM_BYTES_MEM_LOCATION 2000
0029   4082             ;((32*23)-1)
0030   4082             #define SCREEN_SCROLL_MEM_OFFSET 735
0031   4082             
0032   4082             
0033   4082             ;D_FILE is location of screen memory (which moves depending on length of basic, but should be fixed after program is loaded
0034   4082             ; probably should run some code to detect if this is 1K or 16K as well, or just have 2 verisons 1K and 16K
0035   4082             #define D_FILE 16396
0036   4082             ;black block
0037   4082             #define CAR_CHARACTER_CODE 128  
0038   4082             ;blank space
0039   4082             #define NOT_CAR_CHARACTER_CODE 0
0040   4082             ;blank space
0041   4082             #define NOT_ROAD_CHARACTER_CODE 0
0042   4082             ;black grey block
0043   4082             #define ROAD_CHARACTER_CODE 136
0044   4082             #define ROAD_START_MARKER_CHARACTER_CODE 138
0045   4082             
0046   4082             #define GREY_SQAURE 8  
0047   4082             
0048   4082             ; keyboard port for shift key to v
0049   4082             #define KEYBOARD_READ_PORT_SHIFT_TO_V $FE
0050   4082             ; keyboard space to b
0051   4082             #define KEYBOARD_READ_PORT_SPACE_TO_B $7F 
0052   4082             ; starting port numbner for keyboard, is same as first port for shift to v
0053   4082             #define KEYBOARD_READ_PORT $FE 
0054   4082             
0055   4082 C3 BB 40    	jp main
0056   4085             
0057   4085             var_car_pos 
0058   4085 00 00       	DEFB 0,0
0059   4087             var_road_left_addr
0060   4087 00 00       	DEFB 0,0
0061   4089             var_road_right_addr
0062   4089 00 00       	DEFB 0,0	
0063   408B             var_road_pos
0064   408B 00 00       	DEFB 0,0
0065   408D             var_scroll_road_from
0066   408D 00 00       	DEFB 0,0
0067   408F             var_scroll_road_to
0068   408F 00 00       	DEFB 0,0
0069   4091             to_print_mem
0070   4091 00 00       	DEFB 0,0
0071   4093             road_offset_from_edge	
0072   4093 00          	DEFB 0
0073   4094             roadCharacter
0074   4094 00          	DEFB 0
0075   4095             roadCharacterControl
0076   4095 00          	DEFB 0	
0077   4096             
0078   4096             to_print .equ to_print_mem ;use hprint16
0079   4096             	
0080   4096             
0081   4096             hprint16  ; print one 2byte number stored in location $to_print
0082   4096             	;ld hl,$to_print
0083   4096 21 93 40    	ld hl,$to_print+2
0084   4099 06 02       	ld b,2	
0085   409B             hprint16_loop	
0086   409B 7E          	ld a, (hl)
0087   409C F5          	push af ;store the original value of a for later
0088   409D E6 F0       	and $f0 ; isolate the first digit
0089   409F 1F          	rra
0090   40A0 1F          	rra
0091   40A1 1F          	rra
0092   40A2 1F          	rra
0093   40A3 C6 1C       	add a,$1c ; add 28 to the character code
0094   40A5 CD 10 00    	call PRINT ;
0095   40A8 F1          	pop af ; retrieve original value of a
0096   40A9 E6 0F       	and $0f ; isolate the second digit
0097   40AB C6 1C       	add a,$1c ; add 28 to the character code
0098   40AD CD 10 00    	call PRINT
0099   40B0 3E 00       	ld a, 00;_NL ;print new line ; 00 is space
0100   40B2             	;call PRINT ; print a space character
0101   40B2             	
0102   40B2 2B          	dec hl
0103   40B3 10 E6       	djnz hprint16_loop
0104   40B5             	; restore registers
0105   40B5 3E 76       	ld a, _NL
0106   40B7 CD 10 00    	call PRINT
0107   40BA C9          	ret
0108   40BB             
0109   40BB             
0110   40BB             main
0111   40BB CD 2A 0A    	call CLS	
0112   40BE             
0113   40BE 3E 09       	ld a,9
0114   40C0 32 93 40    	ld (road_offset_from_edge),a
0115   40C3             	
0116   40C3             	;; initialise the scroll from and too, 
0117   40C3             	;; scroll from is the D_FILE+(cols*(rows-1)-1
0118   40C3             	;; scroll to is the D_FILE + (cols*rows)-1     (= scroll from + 32)
0119   40C3 2A 0C 40    	ld hl,(D_FILE) ;initialise road start memory address
0120   40C6 11 DF 02    	ld de, SCREEN_SCROLL_MEM_OFFSET
0121   40C9 19          	add hl, de	
0122   40CA 22 8D 40    	ld (var_scroll_road_from), hl
0123   40CD 11 15 00    	ld de, 21
0124   40D0 19          	add hl, de
0125   40D1 22 8F 40    	ld (var_scroll_road_to), hl
0126   40D4             
0127   40D4 2A 0C 40    	ld hl,(D_FILE) ;initialise road start memory address
0128   40D7 11 09 00    	ld de, ROAD_SCREEN_MEM_OFFSET
0129   40DA 19          	add hl, de	
0130   40DB 22 87 40    	ld (var_road_left_addr),hl ; store initial road left pos at top left of screen
0131   40DE             
0132   40DE 3E 88       	ld a, 136
0133   40E0 06 18       	ld b,24 ; for this debug version do half and alternate pattern to see scroll
0134   40E2             initialiseRoad  ;; was fillscreen in zx spectrum version, initialiseRoad is beter name of what it's doing!!
0135   40E2             	
0136   40E2 77          	ld (hl),a    ;; road starts as two staight vertical lines 
0137   40E3 23          	inc hl   	 ;; make each edge of road 2 characters wide
0138   40E4 77          	ld (hl),a   	
0139   40E5 11 09 00    	ld de,WIDTH_OF_ROAD   
0140   40E8 19          	add hl,de			  ;; add offset to get to other side of road	
0141   40E9 77          	ld (hl),a				;; make each edge of road 2 characters wide
0142   40EA 23          	inc hl					
0143   40EB 77          	ld (hl),a
0144   40EC 11 16 00    	ld de,22  ;; on zx spectrum had ld de,21, but end of line on zx81 has chr$128 needs skip
0145   40EF             
0146   40EF 19          	add hl,de
0147   40F0 10 F0       	djnz initialiseRoad	
0148   40F2             	
0149   40F2 3E 88       	ld a, 136
0150   40F4 32 94 40    	ld (roadCharacter), a
0151   40F7 3E 02       	ld a, 2
0152   40F9 32 95 40    	ld (roadCharacterControl), a
0153   40FC             	
0154   40FC             principalloop
0155   40FC             
0156   40FC             
0157   40FC             	;scroll road	
0158   40FC 2A 8D 40    	ld hl,(var_scroll_road_from)  ; load left road address	
0159   40FF ED 5B 8F 40 	ld de,(var_scroll_road_to) ; load right road address		
0160   4103 01 E1 02    	ld bc,737					; 736 = 32columns * 23 rows
0161   4106             	; LDDR repeats the instruction LDD (Does a LD (DE),(HL) and decrements 
0162   4106             	; each of DE, HL, and BC) until BC=0. Note that if BC=0 before 
0163   4106             	; the start of the routine, it will try loop around until BC=0 again.	
0164   4106 ED B8       	lddr
0165   4108             
0166   4108             	; erase old road
0167   4108 3E 00       	ld a, 0
0168   410A 2A 87 40    	ld hl,(var_road_left_addr)
0169   410D 77          	ld (hl),a
0170   410E 23          	inc hl
0171   410F 77          	ld (hl),a
0172   4110 11 09 00    	ld de,WIDTH_OF_ROAD
0173   4113 19          	add hl,de
0174   4114 77          	ld (hl),a
0175   4115 23          	inc hl
0176   4116 77          	ld (hl),a
0177   4117             
0178   4117             	;user input to move road left or right
0179   4117 3E FE       	ld a, KEYBOARD_READ_PORT_SHIFT_TO_V			; read keyboard shift to v
0180   4119 DB FE       	in a, (KEYBOARD_READ_PORT)						; read from io port	
0181   411B CB 57       	bit 2, a								; check bit set for key press right move "M"
0182   411D 28 0A       	jr z, roadleft
0183   411F             
0184   411F 3E 7F       	ld a, KEYBOARD_READ_PORT_SPACE_TO_B			; read keyboard shift to v
0185   4121 DB FE       	in a, (KEYBOARD_READ_PORT)						; read from io port	
0186   4123 CB 57       	bit 2, a
0187   4125 28 1F       	jr z, roadright
0188   4127             	
0189   4127 18 38       	jr printNewRoad
0190   4129             	
0191   4129             roadleft	
0192   4129             ; move road position to left
0193   4129 2A 87 40    	ld hl,(var_road_left_addr)
0194   412C 2B          	dec hl
0195   412D 22 87 40    	ld (var_road_left_addr), hl	
0196   4130 3A 93 40    	ld a, (road_offset_from_edge)
0197   4133 3D          	dec a 
0198   4134 32 93 40    	ld (road_offset_from_edge),a
0199   4137             
0200   4137 FE 00       	cp 0
0201   4139 C2 61 41    	jp nz, printNewRoad   ; skip inc if it's not at edge otherwise inc 
0202   413C 3C          	inc a
0203   413D 32 93 40    	ld (road_offset_from_edge),a
0204   4140 23          	inc hl
0205   4141 22 87 40    	ld (var_road_left_addr), hl
0206   4144             
0207   4144 18 1B       	jr printNewRoad
0208   4146             	
0209   4146             roadright
0210   4146 2A 87 40    	ld hl,(var_road_left_addr)
0211   4149 23          	inc hl
0212   414A 22 87 40    	ld (var_road_left_addr), hl		
0213   414D 3A 93 40    	ld a, (road_offset_from_edge)
0214   4150 3C          	inc a 
0215   4151 32 93 40    	ld (road_offset_from_edge),a
0216   4154             	
0217   4154 FE 0F       	cp 15
0218   4156 C2 61 41    	jp nz, printNewRoad   ; skip inc if it's not at edge otherwise inc 
0219   4159 3D          	dec a
0220   415A 32 93 40    	ld (road_offset_from_edge),a
0221   415D 2B          	dec hl
0222   415E 22 87 40    	ld (var_road_left_addr), hl
0223   4161             
0224   4161             printNewRoad
0225   4161 2A 87 40    	ld hl,(var_road_left_addr)	
0226   4164 3A 94 40    	ld a, (roadCharacter)	
0227   4167 77          	ld (hl),a
0228   4168 23          	inc hl
0229   4169 77          	ld (hl),a
0230   416A 11 09 00    	ld de,WIDTH_OF_ROAD
0231   416D 19          	add hl,de
0232   416E 77          	ld (hl),a
0233   416F 23          	inc hl
0234   4170 77          	ld (hl),a
0235   4171             
0236   4171             	;toggle road character to show if scrolling is working
0237   4171 AF          	xor a  ;print new road
0238   4172 3A 95 40    	ld a,(roadCharacterControl)
0239   4175 3D          	dec a
0240   4176 32 95 40    	ld (roadCharacterControl),a
0241   4179 3E 88       	ld a, 136
0242   417B 32 94 40    	ld (roadCharacter), a
0243   417E C2 8B 41    	jp nz, preWaitloop
0244   4181 3E 04       	ld a, 4
0245   4183 32 95 40    	ld (roadCharacterControl), a
0246   4186 3E 80       	ld a, 128
0247   4188 32 94 40    	ld (roadCharacter), a
0248   418B             	
0249   418B             preWaitloop	
0250   418B 01 FF 05    	ld bc,$05ff ;max waiting time
0251   418E             waitloop
0252   418E 0B          	dec bc
0253   418F 78          	ld a,b
0254   4190 B1          	or c
0255   4191 20 FB       	jr nz, waitloop
0256   4193 C3 FC 40    	jp principalloop
0257   4196             gameover
0258   4196 C9          	ret     ; game and tutorial written by Jon Kingsman
0259   4197             
0260   4197             ;include our variables
0261   4197             #include "vars.asm"
0001+  4197             ;our variables 
0002+  4197             
0262   4197             
0263   4197             ; ===========================================================
0264   4197             ; code ends
0265   4197             ; ===========================================================
0266   4197             ;end the REM line and put in the RAND USR line to call our 'hex code'
0267   4197             #include "line2.asm"
0001+  4197             ;this is the end of line 1 - the REM	 		
0002+  4197 76          				DEFB $76                        ; Newline				
0003+  4198             ;followed by the the RAND USR line				
0004+  4198             Line1End       
0005+  4198 00 0A       Line2			DEFB $00,$0a
0006+  419A 0E 00                       DEFW Line2End-Line2Text
0007+  419C F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0008+  419E 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0008+  41A2 20 
0009+  41A3 7E                          DEFB $7E                        ; Number
0010+  41A4 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0010+  41A8 00 
0011+  41A9 76                          DEFB $76                        ; Newline
0012+  41AA             Line2End 
0268   41AA             
0269   41AA             ;display file defintion
0270   41AA             #include "screen.asm"               
0001+  41AA             ;ZX81 screens
0002+  41AA             ; Display file (ZX81 screen) - low res screen 
0003+  41AA 76          Display        	DEFB $76     
0004+  41AB 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 0
0004+  41AF 00 00 00 00 
0004+  41B3 00 00 00 00 
0004+  41B7 00 00 00 00 
0004+  41BB 00 00 00 00 
0004+  41BF 00 00 00 00 
0004+  41C3 00 00 00 00 
0004+  41C7 00 00 00 00 
0004+  41CB 76 
0005+  41CC 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 1
0005+  41D0 00 00 00 00 
0005+  41D4 00 00 00 00 
0005+  41D8 00 00 00 00 
0005+  41DC 00 00 00 00 
0005+  41E0 00 00 00 00 
0005+  41E4 00 00 00 00 
0005+  41E8 00 00 00 00 
0005+  41EC 76 
0006+  41ED 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 2
0006+  41F1 00 00 00 00 
0006+  41F5 00 00 00 00 
0006+  41F9 00 00 00 00 
0006+  41FD 00 00 00 00 
0006+  4201 00 00 00 00 
0006+  4205 00 00 00 00 
0006+  4209 00 00 00 00 
0006+  420D 76 
0007+  420E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 3
0007+  4212 00 00 00 00 
0007+  4216 00 00 00 00 
0007+  421A 00 00 00 00 
0007+  421E 00 00 00 00 
0007+  4222 00 00 00 00 
0007+  4226 00 00 00 00 
0007+  422A 00 00 00 00 
0007+  422E 76 
0008+  422F 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 4
0008+  4233 00 00 00 00 
0008+  4237 00 00 00 00 
0008+  423B 00 00 00 00 
0008+  423F 00 00 00 00 
0008+  4243 00 00 00 00 
0008+  4247 00 00 00 00 
0008+  424B 00 00 00 00 
0008+  424F 76 
0009+  4250 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 5
0009+  4254 00 00 00 00 
0009+  4258 00 00 00 00 
0009+  425C 00 00 00 00 
0009+  4260 00 00 00 00 
0009+  4264 00 00 00 00 
0009+  4268 00 00 00 00 
0009+  426C 00 00 00 00 
0009+  4270 76 
0010+  4271 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 6
0010+  4275 00 00 00 00 
0010+  4279 00 00 00 00 
0010+  427D 00 00 00 00 
0010+  4281 00 00 00 00 
0010+  4285 00 00 00 00 
0010+  4289 00 00 00 00 
0010+  428D 00 00 00 00 
0010+  4291 76 
0011+  4292 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 7
0011+  4296 00 00 00 00 
0011+  429A 00 00 00 00 
0011+  429E 00 00 00 00 
0011+  42A2 00 00 00 00 
0011+  42A6 00 00 00 00 
0011+  42AA 00 00 00 00 
0011+  42AE 00 00 00 00 
0011+  42B2 76 
0012+  42B3 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 8
0012+  42B7 00 00 00 00 
0012+  42BB 00 00 00 00 
0012+  42BF 00 00 00 00 
0012+  42C3 00 00 00 00 
0012+  42C7 00 00 00 00 
0012+  42CB 00 00 00 00 
0012+  42CF 00 00 00 00 
0012+  42D3 76 
0013+  42D4 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 9
0013+  42D8 00 00 00 00 
0013+  42DC 00 00 00 00 
0013+  42E0 00 00 00 00 
0013+  42E4 00 00 00 00 
0013+  42E8 00 00 00 00 
0013+  42EC 00 00 00 00 
0013+  42F0 00 00 00 00 
0013+  42F4 76 
0014+  42F5 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 10
0014+  42F9 00 00 00 00 
0014+  42FD 00 00 00 00 
0014+  4301 00 00 00 00 
0014+  4305 00 00 00 00 
0014+  4309 00 00 00 00 
0014+  430D 00 00 00 00 
0014+  4311 00 00 00 00 
0014+  4315 76 
0015+  4316 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 11
0015+  431A 00 00 00 00 
0015+  431E 00 00 00 00 
0015+  4322 00 00 00 00 
0015+  4326 00 00 00 00 
0015+  432A 00 00 00 00 
0015+  432E 00 00 00 00 
0015+  4332 00 00 00 00 
0015+  4336 76 
0016+  4337 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 12
0016+  433B 00 00 00 00 
0016+  433F 00 00 00 00 
0016+  4343 00 00 00 00 
0016+  4347 00 00 00 00 
0016+  434B 00 00 00 00 
0016+  434F 00 00 00 00 
0016+  4353 00 00 00 00 
0016+  4357 76 
0017+  4358 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 13
0017+  435C 00 00 00 00 
0017+  4360 00 00 00 00 
0017+  4364 00 00 00 00 
0017+  4368 00 00 00 00 
0017+  436C 00 00 00 00 
0017+  4370 00 00 00 00 
0017+  4374 00 00 00 00 
0017+  4378 76 
0018+  4379 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 14
0018+  437D 00 00 00 00 
0018+  4381 00 00 00 00 
0018+  4385 00 00 00 00 
0018+  4389 00 00 00 00 
0018+  438D 00 00 00 00 
0018+  4391 00 00 00 00 
0018+  4395 00 00 00 00 
0018+  4399 76 
0019+  439A 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 15
0019+  439E 00 00 00 00 
0019+  43A2 00 00 00 00 
0019+  43A6 00 00 00 00 
0019+  43AA 00 00 00 00 
0019+  43AE 00 00 00 00 
0019+  43B2 00 00 00 00 
0019+  43B6 00 00 00 00 
0019+  43BA 76 
0020+  43BB 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 16
0020+  43BF 00 00 00 00 
0020+  43C3 00 00 00 00 
0020+  43C7 00 00 00 00 
0020+  43CB 00 00 00 00 
0020+  43CF 00 00 00 00 
0020+  43D3 00 00 00 00 
0020+  43D7 00 00 00 00 
0020+  43DB 76 
0021+  43DC 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 17
0021+  43E0 00 00 00 00 
0021+  43E4 00 00 00 00 
0021+  43E8 00 00 00 00 
0021+  43EC 00 00 00 00 
0021+  43F0 00 00 00 00 
0021+  43F4 00 00 00 00 
0021+  43F8 00 00 00 00 
0021+  43FC 76 
0022+  43FD 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 18
0022+  4401 00 00 00 00 
0022+  4405 00 00 00 00 
0022+  4409 00 00 00 00 
0022+  440D 00 00 00 00 
0022+  4411 00 00 00 00 
0022+  4415 00 00 00 00 
0022+  4419 00 00 00 00 
0022+  441D 76 
0023+  441E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 19
0023+  4422 00 00 00 00 
0023+  4426 00 00 00 00 
0023+  442A 00 00 00 00 
0023+  442E 00 00 00 00 
0023+  4432 00 00 00 00 
0023+  4436 00 00 00 00 
0023+  443A 00 00 00 00 
0023+  443E 76 
0024+  443F 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 20
0024+  4443 00 00 00 00 
0024+  4447 00 00 00 00 
0024+  444B 00 00 00 00 
0024+  444F 00 00 00 00 
0024+  4453 00 00 00 00 
0024+  4457 00 00 00 00 
0024+  445B 00 00 00 00 
0024+  445F 76 
0025+  4460 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 21
0025+  4464 00 00 00 00 
0025+  4468 00 00 00 00 
0025+  446C 00 00 00 00 
0025+  4470 00 00 00 00 
0025+  4474 00 00 00 00 
0025+  4478 00 00 00 00 
0025+  447C 00 00 00 00 
0025+  4480 76 
0026+  4481 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 22
0026+  4485 00 00 00 00 
0026+  4489 00 00 00 00 
0026+  448D 00 00 00 00 
0026+  4491 00 00 00 00 
0026+  4495 00 00 00 00 
0026+  4499 00 00 00 00 
0026+  449D 00 00 00 00 
0026+  44A1 76 
0027+  44A2 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 23
0027+  44A6 00 00 00 00 
0027+  44AA 00 00 00 00 
0027+  44AE 00 00 00 00 
0027+  44B2 00 00 00 00 
0027+  44B6 00 00 00 00 
0027+  44BA 00 00 00 00 
0027+  44BE 00 00 00 00 
0027+  44C2 76 
0028+  44C3             
0271   44C3             
0272   44C3             ;close out the basic program
0273   44C3             #include "endbasic.asm"
0001+  44C3             ; close out the BASIC program structure
0002+  44C3             ; BASIC Variables area 
0003+  44C3             Variables:      
0004+  44C3 80          VariablesEnd:   DEFB $80
0005+  44C4             BasicEnd:                              
0006+  44C4             
0007+  44C4             
0008+  44C4             #END
tasm: Number of errors = 0
