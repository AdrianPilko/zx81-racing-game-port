0001   0000             ;;;;;;;;;;;;;;;;;;;;;
0002   0000             ;test program screen scroll
0003   0000             ;;;;;;;;;;;;;;;;;;;;;
0004   0000             
0005   0000             #include "zx81defs.asm" ;; https://www.sinclairzxworld.com/viewtopic.php?t=2186&start=40
0001+  0000             ;defines to make us feel more at home
0002+  0000             #define         DEFB .BYTE 
0003+  0000             #define         DEFW .WORD
0004+  0000             #define         DEFM .TEXT
0005+  0000             #define         ORG  .ORG
0006+  0000             #define         EQU  .EQU
0006   0000             ;EQUs for ROM routines
0007   0000             #include "zx81rom.asm"
0001+  0000             ;ZX81 ROM routines 
0002+  0000             PRINT			EQU $10
0003+  0000             PRINTAT			EQU $08F5
0004+  0000             DISPROUT		EQU $0281
0005+  0000             ;D_FILE			EQU	$400C
0006+  0000             DISPLAY_3		EQU $0292 ;restore registers after a 'slow' display
0007+  0000             DISPLAY_5		EQU $02B5
0008+  0000             PLOT			EQU $0BB2 	; note ROM plot is 0baf - however first thing it does try to pull BC from the calculator stack
0009+  0000             							; so we'll skip past that and set BC ourselves
0010+  0000             CLS				EQU $0A2A
0011+  0000             KSCAN           EQU $02BB 
0012+  0000             FINDCHR         EQU $07BD
0013+  0000             COPY            EQU $0869
0014+  0000             FAST            EQU $0F23
0015+  0000             SLOW            EQU $0F2B
0016+  0000             SLOWORFAST		EQU $0207
0017+  0000             PAUSE			EQU $0F32
0018+  0000             SCROLL 			EQU $0C0E
0019+  0000             ;sys vars
0020+  0000             ERR_NR			EQU $40000008   0000             ;ZX81 char codes/how to survive without ASCII
0009   0000             #include "charcodes.asm"
0001+  0000             ; ZX81 Characters. 
0002+  0000             __:				EQU	$00	;spacja
0003+  0000             _QT:			EQU	$0B	;"
0004+  0000             _PD:			EQU	$0C	;funt 
0005+  0000             _SD:			EQU	$0D	;$
0006+  0000             _CL:			EQU	$0E	;:
0007+  0000             _QM:			EQU	$0F	;?
0008+  0000             _OP:			EQU	$10	;(
0009+  0000             _CP:			EQU	$11	;)
0010+  0000             _GT:			EQU	$12	;>
0011+  0000             _LT:			EQU	$13	;<
0012+  0000             _EQ:			EQU	$14	;=
0013+  0000             _PL:			EQU	$15	;+
0014+  0000             _MI:			EQU	$16	;-
0015+  0000             _AS:			EQU	$17	;*
0016+  0000             _SL:			EQU	$18	;/
0017+  0000             _SC:			EQU	$19	;;
0018+  0000             _CM:			EQU	$1A	;,
0019+  0000             _DT:			EQU	$1B	;.
0020+  0000             _NL:			EQU	$76	;NEWLINE
0021+  0000             
0022+  0000             _0				EQU $1C
0023+  0000             _1				EQU $1D
0024+  0000             _2				EQU $1E
0025+  0000             _3				EQU $1F
0026+  0000             _4				EQU $20
0027+  0000             _5				EQU $21
0028+  0000             _6				EQU $22
0029+  0000             _7				EQU $23
0030+  0000             _8				EQU $24
0031+  0000             _9				EQU $25
0032+  0000             _A				EQU $26
0033+  0000             _B				EQU $27
0034+  0000             _C				EQU $28
0035+  0000             _D				EQU $29
0036+  0000             _E				EQU $2A
0037+  0000             _F				EQU $2B
0038+  0000             _G				EQU $2C
0039+  0000             _H				EQU $2D
0040+  0000             _I				EQU $2E
0041+  0000             _J				EQU $2F
0042+  0000             _K				EQU $30
0043+  0000             _L				EQU $31
0044+  0000             _M				EQU $32
0045+  0000             _N				EQU $33
0046+  0000             _O				EQU $34
0047+  0000             _P				EQU $35
0048+  0000             _Q				EQU $36
0049+  0000             _R				EQU $37
0050+  0000             _S				EQU $38
0051+  0000             _T				EQU $39
0052+  0000             _U				EQU $3A
0053+  0000             _V				EQU $3B
0054+  0000             _W				EQU $3C
0055+  0000             _X				EQU $3D
0056+  0000             _Y				EQU $3E
0057+  0000             _Z				EQU $3F
0010   0000             ;system variables
0011   0000             #include "zx81sys.asm"
0001+  0000             ;system variables
0002+  0000             ;Origin of a ZX81 file is always 16393 
0003+  0000             
0004+  4009                             ORG 16393
0005+  4009                             
0006+  4009             ; System variables live here
0007+  4009 00          VERSN:          DEFB 0
0008+  400A 02 00       E_PPC:          DEFW 2
0009+  400C B9 41       D_FILE:         DEFW Display
0010+  400E BA 41       DF_CC:          DEFW Display+1                  ; First character of display
0011+  4010 D2 44       VARS:           DEFW Variables
0012+  4012 00 00       DEST:           DEFW 0
0013+  4014 D3 44       E_LINE:         DEFW BasicEnd 
0014+  4016 D7 44       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0015+  4018 00 00       X_PTR:          DEFW 0
0016+  401A D8 44       STKBOT:         DEFW BasicEnd+5
0017+  401C D8 44       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0018+  401E 00          BREG:           DEFB 0
0019+  401F 5D 40       MEM:            DEFW MEMBOT
0020+  4021 00          UNUSED1:        DEFB 0
0021+  4022 02          DF_SZ:          DEFB 2
0022+  4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0023+  4025 BF FD       LAST_K:         DEFW $fdbf
0024+  4027 0F          DEBOUN:         DEFB 15
0025+  4028 37          MARGIN:         DEFB 55
0026+  4029 A7 41       NXTLIN:         DEFW Line2                      ; Next line address
0027+  402B 00 00       OLDPPC:         DEFW 0
0028+  402D 00          FLAGX:          DEFB 0
0029+  402E 00 00       STRLEN:         DEFW 0
0030+  4030 8D 0C       T_ADDR:         DEFW $0c8d
0031+  4032 00 00       SEED:           DEFW 0
0032+  4034 A3 F5       FRAMES:         DEFW $f5a3
0033+  4036 00 00       COORDS:         DEFW 0
0034+  4038 BC          PR_CC:          DEFB $bc
0035+  4039 21 18       S_POSN:         DEFW $1821
0036+  403B 40          CDFLAG:         DEFB $40
0037+  403C 00 00 00 00 PRBUFF:         DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$76 ; 32 Spaces + Newline
0037+  4040 00 00 00 00 
0037+  4044 00 00 00 00 
0037+  4048 00 00 00 00 
0037+  404C 00 00 00 00 
0037+  4050 00 00 00 00 
0037+  4054 00 00 00 00 
0037+  4058 00 00 00 00 
0037+  405C 76 
0038+  405D 00 00 00 00 MEMBOT:         DEFB 0,0,0,0,0,0,0,0,0,0,$84,$20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 30 zeros
0038+  4061 00 00 00 00 
0038+  4065 00 00 84 20 
0038+  4069 00 00 00 00 
0038+  406D 00 00 00 00 
0038+  4071 00 00 00 00 
0038+  4075 00 00 00 00 
0038+  4079 00 00 
0039+  407B 00 00       UNUNSED2:       DEFW 0
0040+  407D             
0041+  407D             ; End of system variables
0042+  407D             
0012   407D             
0013   407D             ;the standard REM statement that will contain our 'hex' code
0014   407D             #include "line1.asm"
0001+  407D             ;Line 1 
0002+  407D             ;this is the REM statement...
0003+  407D 00 00       Line1:          DEFB $00,$00                    ; Line 1
0004+  407F 26 01                       DEFW Line1End-Line1Text         ; Line 1 length
0005+  4081 EA          Line1Text:      DEFB $ea                        ; REM             
0006+  4082             
0015   4082             
0016   4082             ; these variables need converting to screen addresses for zx81
0017   4082             ; problem with zx81 is the screen display D_FILE memory address changes with size of basic program 
0018   4082             ; see https://www.sinclairzxworld.com/viewtopic.php?t=3919
0019   4082             ; (the asm here is converted to one line of basic)
0020   4082             #define ROWS_IN_SCREEN 24
0021   4082             #define COL_IN_SCREEN 32
0022   4082             #define ROAD_SCREEN_MEM_OFFSET 9    
0023   4082             #define WIDTH_OF_ROAD 9
0024   4082             #define CAR_SCREEN_MEM_START_OFFSET 773
0025   4082             ;#define SCREEN_MEM_OFFSET_TO_LAST_ROW 736
0026   4082             #define ROADFROM_SCREEN_MEM_LOCATION 769
0027   4082             #define ROADTO_SCREEN_MEM_LOCATION 778
0028   4082             #define RANDOM_BYTES_MEM_LOCATION 2000
0029   4082             ;((32*23)-1)
0030   4082             #define SCREEN_SCROLL_MEM_OFFSET 735
0031   4082             
0032   4082             
0033   4082             ;D_FILE is location of screen memory (which moves depending on length of basic, but should be fixed after program is loaded
0034   4082             ; probably should run some code to detect if this is 1K or 16K as well, or just have 2 verisons 1K and 16K
0035   4082             #define D_FILE 16396
0036   4082             ;black block
0037   4082             #define CAR_CHARACTER_CODE 128  
0038   4082             ;blank space
0039   4082             #define NOT_CAR_CHARACTER_CODE 0
0040   4082             ;blank space
0041   4082             #define NOT_ROAD_CHARACTER_CODE 0
0042   4082             ;black grey block
0043   4082             #define ROAD_CHARACTER_CODE 136
0044   4082             #define ROAD_START_MARKER_CHARACTER_CODE 138
0045   4082             
0046   4082             #define GREY_SQAURE 8  
0047   4082             
0048   4082             ; keyboard port for shift key to v
0049   4082             #define KEYBOARD_READ_PORT_SHIFT_TO_V $FE
0050   4082             ; keyboard space to b
0051   4082             #define KEYBOARD_READ_PORT_SPACE_TO_B $7F 
0052   4082             ; starting port numbner for keyboard, is same as first port for shift to v
0053   4082             #define KEYBOARD_READ_PORT $FE 
0054   4082             
0055   4082 C3 BB 40    	jp main
0056   4085             
0057   4085             var_car_pos 
0058   4085 00 00       	DEFB 0,0
0059   4087             var_road_left_addr
0060   4087 00 00       	DEFB 0,0
0061   4089             var_road_right_addr
0062   4089 00 00       	DEFB 0,0	
0063   408B             var_road_pos
0064   408B 00 00       	DEFB 0,0
0065   408D             var_scroll_road_from
0066   408D 00 00       	DEFB 0,0
0067   408F             var_scroll_road_to
0068   408F 00 00       	DEFB 0,0
0069   4091             to_print_mem
0070   4091 00 00       	DEFB 0,0
0071   4093             road_offset_from_edge	
0072   4093 00          	DEFB 0
0073   4094             roadCharacter
0074   4094 00          	DEFB 0
0075   4095             roadCharacterControl
0076   4095 00          	DEFB 0	
0077   4096             
0078   4096             to_print .equ to_print_mem ;use hprint16
0079   4096             	
0080   4096             
0081   4096             hprint16  ; print one 2byte number stored in location $to_print
0082   4096             	;ld hl,$to_print
0083   4096 21 93 40    	ld hl,$to_print+2
0084   4099 06 02       	ld b,2	
0085   409B             hprint16_loop	
0086   409B 7E          	ld a, (hl)
0087   409C F5          	push af ;store the original value of a for later
0088   409D E6 F0       	and $f0 ; isolate the first digit
0089   409F 1F          	rra
0090   40A0 1F          	rra
0091   40A1 1F          	rra
0092   40A2 1F          	rra
0093   40A3 C6 1C       	add a,$1c ; add 28 to the character code
0094   40A5 CD 10 00    	call PRINT ;
0095   40A8 F1          	pop af ; retrieve original value of a
0096   40A9 E6 0F       	and $0f ; isolate the second digit
0097   40AB C6 1C       	add a,$1c ; add 28 to the character code
0098   40AD CD 10 00    	call PRINT
0099   40B0 3E 00       	ld a, 00;_NL ;print new line ; 00 is space
0100   40B2             	;call PRINT ; print a space character
0101   40B2             	
0102   40B2 2B          	dec hl
0103   40B3 10 E6       	djnz hprint16_loop
0104   40B5             	; restore registers
0105   40B5 3E 76       	ld a, _NL
0106   40B7 CD 10 00    	call PRINT
0107   40BA C9          	ret
0108   40BB             
0109   40BB             
0110   40BB             main
0111   40BB CD 2A 0A    	call CLS	
0112   40BE             
0113   40BE 3E 09       	ld a,9
0114   40C0 32 93 40    	ld (road_offset_from_edge),a
0115   40C3             	
0116   40C3             	;; initialise the scroll from and too, 
0117   40C3             	;; scroll from is the D_FILE+(cols*(rows-1)-1
0118   40C3             	;; scroll to is the D_FILE + (cols*rows)-1     (= scroll from + 32)
0119   40C3 2A 0C 40    	ld hl,(D_FILE) ;initialise road start memory address
0120   40C6 11 DF 02    	ld de, SCREEN_SCROLL_MEM_OFFSET
0121   40C9 19          	add hl, de	
0122   40CA 22 8D 40    	ld (var_scroll_road_from), hl
0123   40CD 11 20 00    	ld de, 32
0124   40D0 19          	add hl, de
0125   40D1 22 8F 40    	ld (var_scroll_road_to), hl
0126   40D4             
0127   40D4 2A 0C 40    	ld hl,(D_FILE) ;initialise road start memory address
0128   40D7 11 09 00    	ld de, ROAD_SCREEN_MEM_OFFSET
0129   40DA 19          	add hl, de	
0130   40DB 22 87 40    	ld (var_road_left_addr),hl ; store initial road left pos at top left of screen
0131   40DE             
0132   40DE 3E 88       	ld a, 136
0133   40E0 06 17       	ld b,23 ; for this debug version do half and alternate pattern to see scroll
0134   40E2             initialiseRoad  ;; was fillscreen in zx spectrum version, initialiseRoad is beter name of what it's doing!!
0135   40E2             	
0136   40E2 77          	ld (hl),a    ;; road starts as two staight vertical lines 
0137   40E3 23          	inc hl   	 ;; make each edge of road 2 characters wide
0138   40E4 77          	ld (hl),a   	
0139   40E5 11 09 00    	ld de,WIDTH_OF_ROAD   
0140   40E8 19          	add hl,de			  ;; add offset to get to other side of road	
0141   40E9 77          	ld (hl),a				;; make each edge of road 2 characters wide
0142   40EA 23          	inc hl					
0143   40EB 77          	ld (hl),a
0144   40EC 11 16 00    	ld de,22  ;; on zx spectrum had ld de,21, but end of line on zx81 has chr$128 needs skip
0145   40EF 19          	add hl,de
0146   40F0 10 F0       	djnz initialiseRoad	
0147   40F2             	
0148   40F2 3E 88       	ld a, 136
0149   40F4 32 94 40    	ld (roadCharacter), a
0150   40F7 3E 02       	ld a, 2
0151   40F9 32 95 40    	ld (roadCharacterControl), a
0152   40FC             	
0153   40FC             principalloop
0154   40FC             
0155   40FC             
0156   40FC             	;scroll road	
0157   40FC 2A 8D 40    	ld hl,(var_scroll_road_from)  ; load left road address	
0158   40FF ED 5B 8F 40 	ld de,(var_scroll_road_to) ; load right road address		
0159   4103 01 E0 02    	ld bc,736					; 736 = 32columns * 23 rows
0160   4106             	; LDDR repeats the instruction LDD (Does a LD (DE),(HL) and decrements 
0161   4106             	; each of DE, HL, and BC) until BC=0. Note that if BC=0 before 
0162   4106             	; the start of the routine, it will try loop around until BC=0 again.	
0163   4106 ED B8       	lddr
0164   4108             
0165   4108             	;user input to move road left or right
0166   4108 3E FE       	ld a, KEYBOARD_READ_PORT_SHIFT_TO_V			; read keyboard shift to v
0167   410A DB FE       	in a, (KEYBOARD_READ_PORT)						; read from io port	
0168   410C CB 57       	bit 2, a								; check bit set for key press right move "M"
0169   410E 28 0A       	jr z, roadleft
0170   4110             
0171   4110 3E 7F       	ld a, KEYBOARD_READ_PORT_SPACE_TO_B			; read keyboard shift to v
0172   4112 DB FE       	in a, (KEYBOARD_READ_PORT)						; read from io port	
0173   4114 CB 57       	bit 2, a
0174   4116 28 2E       	jr z, roadright
0175   4118             	
0176   4118 18 56       	jr printNewRoad 
0177   411A             
0178   411A             roadleft	
0179   411A             	; erase old road
0180   411A 3E 00       	ld a, 0
0181   411C 2A 87 40    	ld hl,(var_road_left_addr)
0182   411F 77          	ld (hl),a
0183   4120 23          	inc hl
0184   4121 77          	ld (hl),a
0185   4122 11 09 00    	ld de,WIDTH_OF_ROAD
0186   4125 19          	add hl,de
0187   4126 77          	ld (hl),a
0188   4127 23          	inc hl
0189   4128 77          	ld (hl),a
0190   4129             	
0191   4129             ; move road position to left
0192   4129 2A 87 40    	ld hl,(var_road_left_addr)
0193   412C 2B          	dec hl
0194   412D 22 87 40    	ld (var_road_left_addr), hl	
0195   4130 3A 93 40    	ld a, (road_offset_from_edge)
0196   4133 3D          	dec a 
0197   4134 32 93 40    	ld (road_offset_from_edge),a
0198   4137 FE 00       	cp 0
0199   4139 C2 70 41    	jp nz, printNewRoad   ; skip inc if it's not at edge otherwise inc 
0200   413C 3C          	inc a
0201   413D 32 93 40    	ld (road_offset_from_edge),a
0202   4140 23          	inc hl
0203   4141 22 87 40    	ld (var_road_left_addr), hl
0204   4144             
0205   4144 18 2A       	jr printNewRoad
0206   4146             	
0207   4146             roadright
0208   4146             	; erase old road
0209   4146 3E 00       	ld a, 0
0210   4148 2A 87 40    	ld hl,(var_road_left_addr)
0211   414B 77          	ld (hl),a
0212   414C 23          	inc hl
0213   414D 77          	ld (hl),a
0214   414E 11 09 00    	ld de,WIDTH_OF_ROAD
0215   4151 19          	add hl,de
0216   4152 77          	ld (hl),a
0217   4153 23          	inc hl
0218   4154 77          	ld (hl),a
0219   4155             	
0220   4155 2A 87 40    	ld hl,(var_road_left_addr)
0221   4158 23          	inc hl
0222   4159 22 87 40    	ld (var_road_left_addr), hl		
0223   415C 3A 93 40    	ld a, (road_offset_from_edge)
0224   415F 3C          	inc a 
0225   4160 32 93 40    	ld (road_offset_from_edge),a
0226   4163 FE 15       	cp 21
0227   4165 C2 70 41    	jp nz, printNewRoad   ; skip inc if it's not at edge otherwise inc 
0228   4168             
0229   4168 3D          	dec a
0230   4169 32 93 40    	ld (road_offset_from_edge),a
0231   416C 2B          	dec hl
0232   416D 22 87 40    	ld (var_road_left_addr), hl
0233   4170             
0234   4170             printNewRoad
0235   4170             
0236   4170 2A 87 40    	ld hl,(var_road_left_addr)	
0237   4173 3A 94 40    	ld a, (roadCharacter)	
0238   4176 77          	ld (hl),a
0239   4177 23          	inc hl
0240   4178 77          	ld (hl),a
0241   4179 11 09 00    	ld de,WIDTH_OF_ROAD
0242   417C 19          	add hl,de
0243   417D 77          	ld (hl),a
0244   417E 23          	inc hl
0245   417F 77          	ld (hl),a
0246   4180             
0247   4180             	;toggle road character to show if scrolling is working
0248   4180 AF          	xor a  
0249   4181 3A 95 40    	ld a,(roadCharacterControl)
0250   4184 3D          	dec a
0251   4185 32 95 40    	ld (roadCharacterControl),a
0252   4188 3E 88       	ld a, 136
0253   418A 32 94 40    	ld (roadCharacter), a
0254   418D C2 9A 41    	jp nz, preWaitloop
0255   4190 3E 04       	ld a, 4
0256   4192 32 95 40    	ld (roadCharacterControl), a
0257   4195 3E 80       	ld a, 128
0258   4197 32 94 40    	ld (roadCharacter), a
0259   419A             	
0260   419A             preWaitloop	
0261   419A 01 FF 05    	ld bc,$05ff ;max waiting time
0262   419D             waitloop
0263   419D 0B          	dec bc
0264   419E 78          	ld a,b
0265   419F B1          	or c
0266   41A0 20 FB       	jr nz, waitloop
0267   41A2 C3 FC 40    	jp principalloop
0268   41A5             	
0269   41A5             gameover
0270   41A5 C9          	ret     ; game and tutorial written by Jon Kingsman
0271   41A6             
0272   41A6             ;include our variables
0273   41A6             #include "vars.asm"
0001+  41A6             ;our variables 
0002+  41A6             
0274   41A6             
0275   41A6             ; ===========================================================
0276   41A6             ; code ends
0277   41A6             ; ===========================================================
0278   41A6             ;end the REM line and put in the RAND USR line to call our 'hex code'
0279   41A6             #include "line2.asm"
0001+  41A6             ;this is the end of line 1 - the REM	 		
0002+  41A6 76          				DEFB $76                        ; Newline				
0003+  41A7             ;followed by the the RAND USR line				
0004+  41A7             Line1End       
0005+  41A7 00 0A       Line2			DEFB $00,$0a
0006+  41A9 0E 00                       DEFW Line2End-Line2Text
0007+  41AB F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0008+  41AD 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0008+  41B1 20 
0009+  41B2 7E                          DEFB $7E                        ; Number
0010+  41B3 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0010+  41B7 00 
0011+  41B8 76                          DEFB $76                        ; Newline
0012+  41B9             Line2End 
0280   41B9             
0281   41B9             ;display file defintion
0282   41B9             #include "screen.asm"               
0001+  41B9             ;ZX81 screens
0002+  41B9             ; Display file (ZX81 screen) - low res screen 
0003+  41B9 76          Display        	DEFB $76     
0004+  41BA 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 0
0004+  41BE 00 00 00 00 
0004+  41C2 00 00 00 00 
0004+  41C6 00 00 00 00 
0004+  41CA 00 00 00 00 
0004+  41CE 00 00 00 00 
0004+  41D2 00 00 00 00 
0004+  41D6 00 00 00 00 
0004+  41DA 76 
0005+  41DB 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 1
0005+  41DF 00 00 00 00 
0005+  41E3 00 00 00 00 
0005+  41E7 00 00 00 00 
0005+  41EB 00 00 00 00 
0005+  41EF 00 00 00 00 
0005+  41F3 00 00 00 00 
0005+  41F7 00 00 00 00 
0005+  41FB 76 
0006+  41FC 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 2
0006+  4200 00 00 00 00 
0006+  4204 00 00 00 00 
0006+  4208 00 00 00 00 
0006+  420C 00 00 00 00 
0006+  4210 00 00 00 00 
0006+  4214 00 00 00 00 
0006+  4218 00 00 00 00 
0006+  421C 76 
0007+  421D 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 3
0007+  4221 00 00 00 00 
0007+  4225 00 00 00 00 
0007+  4229 00 00 00 00 
0007+  422D 00 00 00 00 
0007+  4231 00 00 00 00 
0007+  4235 00 00 00 00 
0007+  4239 00 00 00 00 
0007+  423D 76 
0008+  423E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 4
0008+  4242 00 00 00 00 
0008+  4246 00 00 00 00 
0008+  424A 00 00 00 00 
0008+  424E 00 00 00 00 
0008+  4252 00 00 00 00 
0008+  4256 00 00 00 00 
0008+  425A 00 00 00 00 
0008+  425E 76 
0009+  425F 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 5
0009+  4263 00 00 00 00 
0009+  4267 00 00 00 00 
0009+  426B 00 00 00 00 
0009+  426F 00 00 00 00 
0009+  4273 00 00 00 00 
0009+  4277 00 00 00 00 
0009+  427B 00 00 00 00 
0009+  427F 76 
0010+  4280 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 6
0010+  4284 00 00 00 00 
0010+  4288 00 00 00 00 
0010+  428C 00 00 00 00 
0010+  4290 00 00 00 00 
0010+  4294 00 00 00 00 
0010+  4298 00 00 00 00 
0010+  429C 00 00 00 00 
0010+  42A0 76 
0011+  42A1 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 7
0011+  42A5 00 00 00 00 
0011+  42A9 00 00 00 00 
0011+  42AD 00 00 00 00 
0011+  42B1 00 00 00 00 
0011+  42B5 00 00 00 00 
0011+  42B9 00 00 00 00 
0011+  42BD 00 00 00 00 
0011+  42C1 76 
0012+  42C2 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 8
0012+  42C6 00 00 00 00 
0012+  42CA 00 00 00 00 
0012+  42CE 00 00 00 00 
0012+  42D2 00 00 00 00 
0012+  42D6 00 00 00 00 
0012+  42DA 00 00 00 00 
0012+  42DE 00 00 00 00 
0012+  42E2 76 
0013+  42E3 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 9
0013+  42E7 00 00 00 00 
0013+  42EB 00 00 00 00 
0013+  42EF 00 00 00 00 
0013+  42F3 00 00 00 00 
0013+  42F7 00 00 00 00 
0013+  42FB 00 00 00 00 
0013+  42FF 00 00 00 00 
0013+  4303 76 
0014+  4304 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 10
0014+  4308 00 00 00 00 
0014+  430C 00 00 00 00 
0014+  4310 00 00 00 00 
0014+  4314 00 00 00 00 
0014+  4318 00 00 00 00 
0014+  431C 00 00 00 00 
0014+  4320 00 00 00 00 
0014+  4324 76 
0015+  4325 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 11
0015+  4329 00 00 00 00 
0015+  432D 00 00 00 00 
0015+  4331 00 00 00 00 
0015+  4335 00 00 00 00 
0015+  4339 00 00 00 00 
0015+  433D 00 00 00 00 
0015+  4341 00 00 00 00 
0015+  4345 76 
0016+  4346 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 12
0016+  434A 00 00 00 00 
0016+  434E 00 00 00 00 
0016+  4352 00 00 00 00 
0016+  4356 00 00 00 00 
0016+  435A 00 00 00 00 
0016+  435E 00 00 00 00 
0016+  4362 00 00 00 00 
0016+  4366 76 
0017+  4367 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 13
0017+  436B 00 00 00 00 
0017+  436F 00 00 00 00 
0017+  4373 00 00 00 00 
0017+  4377 00 00 00 00 
0017+  437B 00 00 00 00 
0017+  437F 00 00 00 00 
0017+  4383 00 00 00 00 
0017+  4387 76 
0018+  4388 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 14
0018+  438C 00 00 00 00 
0018+  4390 00 00 00 00 
0018+  4394 00 00 00 00 
0018+  4398 00 00 00 00 
0018+  439C 00 00 00 00 
0018+  43A0 00 00 00 00 
0018+  43A4 00 00 00 00 
0018+  43A8 76 
0019+  43A9 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 15
0019+  43AD 00 00 00 00 
0019+  43B1 00 00 00 00 
0019+  43B5 00 00 00 00 
0019+  43B9 00 00 00 00 
0019+  43BD 00 00 00 00 
0019+  43C1 00 00 00 00 
0019+  43C5 00 00 00 00 
0019+  43C9 76 
0020+  43CA 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 16
0020+  43CE 00 00 00 00 
0020+  43D2 00 00 00 00 
0020+  43D6 00 00 00 00 
0020+  43DA 00 00 00 00 
0020+  43DE 00 00 00 00 
0020+  43E2 00 00 00 00 
0020+  43E6 00 00 00 00 
0020+  43EA 76 
0021+  43EB 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 17
0021+  43EF 00 00 00 00 
0021+  43F3 00 00 00 00 
0021+  43F7 00 00 00 00 
0021+  43FB 00 00 00 00 
0021+  43FF 00 00 00 00 
0021+  4403 00 00 00 00 
0021+  4407 00 00 00 00 
0021+  440B 76 
0022+  440C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 18
0022+  4410 00 00 00 00 
0022+  4414 00 00 00 00 
0022+  4418 00 00 00 00 
0022+  441C 00 00 00 00 
0022+  4420 00 00 00 00 
0022+  4424 00 00 00 00 
0022+  4428 00 00 00 00 
0022+  442C 76 
0023+  442D 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 19
0023+  4431 00 00 00 00 
0023+  4435 00 00 00 00 
0023+  4439 00 00 00 00 
0023+  443D 00 00 00 00 
0023+  4441 00 00 00 00 
0023+  4445 00 00 00 00 
0023+  4449 00 00 00 00 
0023+  444D 76 
0024+  444E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 20
0024+  4452 00 00 00 00 
0024+  4456 00 00 00 00 
0024+  445A 00 00 00 00 
0024+  445E 00 00 00 00 
0024+  4462 00 00 00 00 
0024+  4466 00 00 00 00 
0024+  446A 00 00 00 00 
0024+  446E 76 
0025+  446F 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 21
0025+  4473 00 00 00 00 
0025+  4477 00 00 00 00 
0025+  447B 00 00 00 00 
0025+  447F 00 00 00 00 
0025+  4483 00 00 00 00 
0025+  4487 00 00 00 00 
0025+  448B 00 00 00 00 
0025+  448F 76 
0026+  4490 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 22
0026+  4494 00 00 00 00 
0026+  4498 00 00 00 00 
0026+  449C 00 00 00 00 
0026+  44A0 00 00 00 00 
0026+  44A4 00 00 00 00 
0026+  44A8 00 00 00 00 
0026+  44AC 00 00 00 00 
0026+  44B0 76 
0027+  44B1 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 23
0027+  44B5 00 00 00 00 
0027+  44B9 00 00 00 00 
0027+  44BD 00 00 00 00 
0027+  44C1 00 00 00 00 
0027+  44C5 00 00 00 00 
0027+  44C9 00 00 00 00 
0027+  44CD 00 00 00 00 
0027+  44D1 76 
0028+  44D2             
0283   44D2             
0284   44D2             ;close out the basic program
0285   44D2             #include "endbasic.asm"
0001+  44D2             ; close out the BASIC program structure
0002+  44D2             ; BASIC Variables area 
0003+  44D2             Variables:      
0004+  44D2 80          VariablesEnd:   DEFB $80
0005+  44D3             BasicEnd:                              
0006+  44D3             
0007+  44D3             
0008+  44D3             #END
tasm: Number of errors = 0
